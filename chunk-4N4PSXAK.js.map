{"version":3,"sources":["node_modules/@angular/material/fesm2022/select-module.mjs","node_modules/uuid/dist/esm-browser/stringify.js","node_modules/uuid/dist/esm-browser/rng.js","node_modules/uuid/dist/esm-browser/native.js","node_modules/uuid/dist/esm-browser/v4.js","projects/devcrate/ngx-dc-dropdown/src/lib/dropdown.service.ts","projects/devcrate/ngx-dc-dropdown/src/lib/dropdown.directives.ts","projects/devcrate/ngx-dc-dropdown/src/lib/dropdown.component.ts","projects/devcrate/ngx-dc-dropdown/src/lib/dropdown.component.html","projects/devcrate/ngx-dc-dropdown/src/lib/dropdown-data.source.ts","projects/devcrate/ngx-dc-dropdown/src/lib/dropdown.module.ts","projects/devcrate/ngx-dc-dropdown/src/public-api.ts","projects/devcrate/ngx-dc-dropdown/src/devcrate-ngx-dc-dropdown.ts"],"sourcesContent":["import { createRepositionScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injector, ChangeDetectorRef, ElementRef, Renderer2, signal, EventEmitter, HostAttributeToken, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _IdGenerator, LiveAnnouncer, removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { hasModifierKey, ENTER, SPACE, A, ESCAPE, DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, filter, map, takeUntil, take } from 'rxjs/operators';\nimport { NgClass } from '@angular/common';\nimport { MAT_FORM_FIELD, MatFormFieldControl } from './form-field2.mjs';\nimport { _animationsDisabled } from './animation.mjs';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP } from './option.mjs';\nimport { ErrorStateMatcher } from './error-options.mjs';\nimport { _ErrorStateTracker } from './error-state.mjs';\nimport { MatOptionModule } from './option-module.mjs';\nimport { MatCommonModule } from './common-module.mjs';\nimport { MatFormFieldModule } from './form-field-module.mjs';\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nfunction MatSelect_Conditional_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.placeholder);\n  }\n}\nfunction MatSelect_Conditional_5_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n  }\n}\nfunction MatSelect_Conditional_5_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.triggerValue);\n  }\n}\nfunction MatSelect_Conditional_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 5);\n    i0.ɵɵconditionalCreate(1, MatSelect_Conditional_5_Conditional_1_Template, 1, 0)(2, MatSelect_Conditional_5_Conditional_2_Template, 2, 1, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(ctx_r1.customTrigger ? 1 : 2);\n  }\n}\nfunction MatSelect_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12, 1);\n    i0.ɵɵlistener(\"keydown\", function MatSelect_ng_template_10_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._handleKeydown($event));\n    });\n    i0.ɵɵprojection(2, 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(i0.ɵɵinterpolate1(\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open \", ctx_r1._getPanelTheme()));\n    i0.ɵɵclassProp(\"mat-select-panel-animations-enabled\", !ctx_r1._animationsDisabled);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.panelClass);\n    i0.ɵɵattribute(\"id\", ctx_r1.id + \"-panel\")(\"aria-multiselectable\", ctx_r1.multiple)(\"aria-label\", ctx_r1.ariaLabel || null)(\"aria-labelledby\", ctx_r1._getPanelAriaLabelledby());\n  }\n}\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-select-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    const injector = inject(Injector);\n    return () => createRepositionScrollStrategy(injector);\n  }\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(_overlay) {\n  const injector = inject(Injector);\n  return () => createRepositionScrollStrategy(injector);\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = /*#__PURE__*/new InjectionToken('MAT_SELECT_CONFIG');\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = /*#__PURE__*/new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n  source;\n  value;\n  constructor(/** Reference to the select that emitted the change event. */\n  source, /** Current value of the select that emitted the event. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n}\nlet MatSelect = /*#__PURE__*/(() => {\n  class MatSelect {\n    _viewportRuler = inject(ViewportRuler);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _idGenerator = inject(_IdGenerator);\n    _renderer = inject(Renderer2);\n    _parentFormField = inject(MAT_FORM_FIELD, {\n      optional: true\n    });\n    ngControl = inject(NgControl, {\n      self: true,\n      optional: true\n    });\n    _liveAnnouncer = inject(LiveAnnouncer);\n    _defaultOptions = inject(MAT_SELECT_CONFIG, {\n      optional: true\n    });\n    _animationsDisabled = _animationsDisabled();\n    _initialized = new Subject();\n    _cleanupDetach;\n    /** All of the defined select options. */\n    options;\n    // TODO(crisbeto): this is only necessary for the non-MDC select, but it's technically a\n    // public API so we have to keep it. It should be deprecated and removed eventually.\n    /** All of the defined groups of options. */\n    optionGroups;\n    /** User-supplied override of the trigger element. */\n    customTrigger;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [{\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'end',\n      originY: 'bottom',\n      overlayX: 'end',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'bottom',\n      panelClass: 'mat-mdc-select-panel-above'\n    }, {\n      originX: 'end',\n      originY: 'top',\n      overlayX: 'end',\n      overlayY: 'bottom',\n      panelClass: 'mat-mdc-select-panel-above'\n    }];\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n      const option = this.options.toArray()[index];\n      if (option) {\n        const panel = this.panel.nativeElement;\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const element = option._getHostElement();\n        if (index === 0 && labelCount === 1) {\n          // If we've got one group label before the option and we're at the top option,\n          // scroll the list to the top. This is better UX than scrolling the list to the\n          // top of the option, because it allows the user to read the top group's label.\n          panel.scrollTop = 0;\n        } else {\n          panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n        }\n      }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n      this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n      return new MatSelectChange(this, value);\n    }\n    /** Factory function used to create a scroll strategy for this select. */\n    _scrollStrategyFactory = inject(MAT_SELECT_SCROLL_STRATEGY);\n    /** Whether or not the overlay panel is open. */\n    _panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    _compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n    _uid = this._idGenerator.getId('mat-select-');\n    /** Current `aria-labelledby` value for the select trigger. */\n    _triggerAriaLabelledBy = null;\n    /**\n     * Keeps track of the previous form control assigned to the select.\n     * Used to detect if it has changed.\n     */\n    _previousControl;\n    /** Emits whenever the component is destroyed. */\n    _destroy = new Subject();\n    /** Tracks the error state of the select. */\n    _errorStateTracker;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /**\n     * Disable the automatic labeling to avoid issues like #27241.\n     * @docs-private\n     */\n    disableAutomaticLabeling = true;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy;\n    /** Deals with the selection logic. */\n    _selectionModel;\n    /** Manages keyboard events for options in the panel. */\n    _keyManager;\n    /** Ideal origin for the overlay panel. */\n    _preferredOverlayOrigin;\n    /** Width of the overlay panel. */\n    _overlayWidth;\n    /** `View -> model callback called when value changes` */\n    _onChange = () => {};\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n    /** ID for the DOM node containing the select's value. */\n    _valueId = this._idGenerator.getId('mat-select-value-');\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy;\n    _overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n    /** Whether the select is focused. */\n    get focused() {\n      return this._focused || this._panelOpen;\n    }\n    _focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType = 'mat-select';\n    /** Trigger that opens the select. */\n    trigger;\n    /** Panel containing the select options. */\n    panel;\n    /** Overlay pane containing the options. */\n    _overlayDir;\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    panelClass;\n    /** Whether the select is disabled. */\n    disabled = false;\n    /** Whether ripples in the select are disabled. */\n    get disableRipple() {\n      return this._disableRipple();\n    }\n    set disableRipple(value) {\n      this._disableRipple.set(value);\n    }\n    _disableRipple = signal(false, ...(ngDevMode ? [{\n      debugName: \"_disableRipple\"\n    }] : []));\n    /** Tab index of the select. */\n    tabIndex = 0;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n      return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n      this._hideSingleSelectionIndicator = value;\n      this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n      return this._placeholder;\n    }\n    set placeholder(value) {\n      this._placeholder = value;\n      this.stateChanges.next();\n    }\n    _placeholder;\n    /** Whether the component is required. */\n    get required() {\n      return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n      this._required = value;\n      this.stateChanges.next();\n    }\n    _required;\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n      return this._multiple;\n    }\n    set multiple(value) {\n      if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectDynamicMultipleError();\n      }\n      this._multiple = value;\n    }\n    _multiple = false;\n    /** Whether to center the active option over the trigger. */\n    disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n      return this._compareWith;\n    }\n    set compareWith(fn) {\n      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatSelectNonFunctionValueError();\n      }\n      this._compareWith = fn;\n      if (this._selectionModel) {\n        // A different comparator means the selection could change.\n        this._initializeSelection();\n      }\n    }\n    /** Value of the select control. */\n    get value() {\n      return this._value;\n    }\n    set value(newValue) {\n      const hasAssigned = this._assignValue(newValue);\n      if (hasAssigned) {\n        this._onChange(newValue);\n      }\n    }\n    _value;\n    /** Aria label of the select. */\n    ariaLabel = '';\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n      return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n      this._errorStateTracker.matcher = value;\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    typeaheadDebounceInterval;\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    sortComparator;\n    /** Unique id of the element. */\n    get id() {\n      return this._id;\n    }\n    set id(value) {\n      this._id = value || this._uid;\n      this.stateChanges.next();\n    }\n    _id;\n    /** Whether the select is in an error state. */\n    get errorState() {\n      return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n      this._errorStateTracker.errorState = value;\n    }\n    /**\n     * Width of the panel. If set to `auto`, the panel will match the trigger width.\n     * If set to null or an empty string, the panel will grow to match the longest option's text.\n     */\n    panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined' ? this._defaultOptions.panelWidth : 'auto';\n    /**\n     * By default selecting an option with a `null` or `undefined` value will reset the select's\n     * value. Enable this option if the reset behavior doesn't match your requirements and instead\n     * the nullable options should become selected. The value of this input can be controlled app-wide\n     * using the `MAT_SELECT_CONFIG` injection token.\n     */\n    canSelectNullableOptions = this._defaultOptions?.canSelectNullableOptions ?? false;\n    /** Combined stream of all of the child options' change events. */\n    optionSelectionChanges = defer(() => {\n      const options = this.options;\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n      return this._initialized.pipe(switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n    openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n    _openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /** Event emitted when the select has been closed. */\n    _closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /** Event emitted when the selected value has been changed by the user. */\n    selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    valueChange = new EventEmitter();\n    constructor() {\n      const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n      const parentForm = inject(NgForm, {\n        optional: true\n      });\n      const parentFormGroup = inject(FormGroupDirective, {\n        optional: true\n      });\n      const tabIndex = inject(new HostAttributeToken('tabindex'), {\n        optional: true\n      });\n      if (this.ngControl) {\n        // Note: we provide the value accessor through here, instead of\n        // the `providers` to avoid running into a circular import.\n        this.ngControl.valueAccessor = this;\n      }\n      // Note that we only want to set this when the defaults pass it in, otherwise it should\n      // stay as `undefined` so that it falls back to the default in the key manager.\n      if (this._defaultOptions?.typeaheadDebounceInterval != null) {\n        this.typeaheadDebounceInterval = this._defaultOptions.typeaheadDebounceInterval;\n      }\n      this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n      this._scrollStrategy = this._scrollStrategyFactory();\n      this.tabIndex = tabIndex == null ? 0 : parseInt(tabIndex) || 0;\n      // Force setter to be called in case id was not specified.\n      this.id = this.id;\n    }\n    ngOnInit() {\n      this._selectionModel = new SelectionModel(this.multiple);\n      this.stateChanges.next();\n      this._viewportRuler.change().pipe(takeUntil(this._destroy)).subscribe(() => {\n        if (this.panelOpen) {\n          this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n          this._changeDetectorRef.detectChanges();\n        }\n      });\n    }\n    ngAfterContentInit() {\n      this._initialized.next();\n      this._initialized.complete();\n      this._initKeyManager();\n      this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n        event.added.forEach(option => option.select());\n        event.removed.forEach(option => option.deselect());\n      });\n      this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n        this._resetOptions();\n        this._initializeSelection();\n      });\n    }\n    ngDoCheck() {\n      const newAriaLabelledby = this._getTriggerAriaLabelledby();\n      const ngControl = this.ngControl;\n      // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n      // is computed as a result of a content query which can cause this binding to trigger a\n      // \"changed after checked\" error.\n      if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n        const element = this._elementRef.nativeElement;\n        this._triggerAriaLabelledBy = newAriaLabelledby;\n        if (newAriaLabelledby) {\n          element.setAttribute('aria-labelledby', newAriaLabelledby);\n        } else {\n          element.removeAttribute('aria-labelledby');\n        }\n      }\n      if (ngControl) {\n        // The disabled state might go out of sync if the form group is swapped out. See #17860.\n        if (this._previousControl !== ngControl.control) {\n          if (this._previousControl !== undefined && ngControl.disabled !== null && ngControl.disabled !== this.disabled) {\n            this.disabled = ngControl.disabled;\n          }\n          this._previousControl = ngControl.control;\n        }\n        this.updateErrorState();\n      }\n    }\n    ngOnChanges(changes) {\n      // Updating the disabled state is handled by the input, but we need to additionally let\n      // the parent form field know to run change detection when the disabled state changes.\n      if (changes['disabled'] || changes['userAriaDescribedBy']) {\n        this.stateChanges.next();\n      }\n      if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n        this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n      }\n    }\n    ngOnDestroy() {\n      this._cleanupDetach?.();\n      this._keyManager?.destroy();\n      this._destroy.next();\n      this._destroy.complete();\n      this.stateChanges.complete();\n      this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n      this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n      if (!this._canOpen()) {\n        return;\n      }\n      // It's important that we read this as late as possible, because doing so earlier will\n      // return a different element since it's based on queries in the form field which may\n      // not have run yet. Also this needs to be assigned before we measure the overlay width.\n      if (this._parentFormField) {\n        this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n      }\n      this._cleanupDetach?.();\n      this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n      this._applyModalPanelOwnership();\n      this._panelOpen = true;\n      this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n        this._changeDetectorRef.detectChanges();\n        this._positioningSettled();\n      });\n      this._overlayDir.attachOverlay();\n      this._keyManager.withHorizontalOrientation(null);\n      this._highlightCorrectOption();\n      this._changeDetectorRef.markForCheck();\n      // Required for the MDC form field to pick up when the overlay has been opened.\n      this.stateChanges.next();\n      // Simulate the animation event before we moved away from `@angular/animations`.\n      Promise.resolve().then(() => this.openedChange.emit(true));\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n      // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n      // the `LiveAnnouncer` and any other usages.\n      //\n      // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n      // section of the DOM we need to look through. This should cover all the cases we support, but\n      // the selector can be expanded if it turns out to be too narrow.\n      const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n      if (!modal) {\n        // Most commonly, the autocomplete trigger is not inside a modal.\n        return;\n      }\n      const panelId = `${this.id}-panel`;\n      if (this._trackedModal) {\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n      }\n      addAriaReferencedId(modal, 'aria-owns', panelId);\n      this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n      if (!this._trackedModal) {\n        // Most commonly, the autocomplete trigger is not used inside a modal.\n        return;\n      }\n      const panelId = `${this.id}-panel`;\n      removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n      this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n      if (this._panelOpen) {\n        this._panelOpen = false;\n        this._exitAndDetach();\n        this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n        this._changeDetectorRef.markForCheck();\n        this._onTouched();\n        // Required for the MDC form field to pick up when the overlay has been closed.\n        this.stateChanges.next();\n        // Simulate the animation event before we moved away from `@angular/animations`.\n        Promise.resolve().then(() => this.openedChange.emit(false));\n      }\n    }\n    /** Triggers the exit animation and detaches the overlay at the end. */\n    _exitAndDetach() {\n      if (this._animationsDisabled || !this.panel) {\n        this._detachOverlay();\n        return;\n      }\n      this._cleanupDetach?.();\n      this._cleanupDetach = () => {\n        cleanupEvent();\n        clearTimeout(exitFallbackTimer);\n        this._cleanupDetach = undefined;\n      };\n      const panel = this.panel.nativeElement;\n      const cleanupEvent = this._renderer.listen(panel, 'animationend', event => {\n        if (event.animationName === '_mat-select-exit') {\n          this._cleanupDetach?.();\n          this._detachOverlay();\n        }\n      });\n      // Since closing the overlay depends on the animation, we have a fallback in case the panel\n      // doesn't animate. This can happen in some internal tests that do `* {animation: none}`.\n      const exitFallbackTimer = setTimeout(() => {\n        this._cleanupDetach?.();\n        this._detachOverlay();\n      }, 200);\n      panel.classList.add('mat-select-panel-exit');\n    }\n    /** Detaches the current overlay directive. */\n    _detachOverlay() {\n      this._overlayDir.detachOverlay();\n      // Some of the overlay detachment logic depends on change detection.\n      // Mark for check to ensure that things get picked up in a timely manner.\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n      this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n      return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n      return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n      if (this.empty) {\n        return '';\n      }\n      if (this._multiple) {\n        const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n        if (this._isRtl()) {\n          selectedOptions.reverse();\n        }\n        // TODO(crisbeto): delimiter should be configurable for proper localization.\n        return selectedOptions.join(', ');\n      }\n      return this._selectionModel.selected[0].viewValue;\n    }\n    /** Refreshes the error state of the select. */\n    updateErrorState() {\n      this._errorStateTracker.updateErrorState();\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n      return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n      if (!this.disabled) {\n        this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n      }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n      const keyCode = event.keyCode;\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n      const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n      const manager = this._keyManager;\n      // Open the select on ALT + arrow key to match the native <select>\n      if (!manager.isTyping() && isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n        event.preventDefault(); // prevents the page from scrolling down when pressing space\n        this.open();\n      } else if (!this.multiple) {\n        const previouslySelectedOption = this.selected;\n        manager.onKeydown(event);\n        const selectedOption = this.selected;\n        // Since the value has changed, we need to announce it ourselves.\n        if (selectedOption && previouslySelectedOption !== selectedOption) {\n          // We set a duration on the live announcement, because we want the live element to be\n          // cleared after a while so that users can't navigate to it using the arrow keys.\n          this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n        }\n      }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n      const manager = this._keyManager;\n      const keyCode = event.keyCode;\n      const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n      const isTyping = manager.isTyping();\n      if (isArrowKey && event.altKey) {\n        // Close the select on ALT + arrow key to match the native <select>\n        event.preventDefault();\n        this.close();\n        // Don't do anything in this case if the user is typing,\n        // because the typing sequence can include the space key.\n      } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n        event.preventDefault();\n        manager.activeItem._selectViaInteraction();\n      } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n        event.preventDefault();\n        const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n        this.options.forEach(option => {\n          if (!option.disabled) {\n            hasDeselectedOptions ? option.select() : option.deselect();\n          }\n        });\n      } else {\n        const previouslyFocusedIndex = manager.activeItemIndex;\n        manager.onKeydown(event);\n        if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n          manager.activeItem._selectViaInteraction();\n        }\n      }\n    }\n    /** Handles keyboard events coming from the overlay. */\n    _handleOverlayKeydown(event) {\n      // TODO(crisbeto): prior to #30363 this was being handled inside the overlay directive, but we\n      // need control over the animation timing so we do it manually. We should remove the `keydown`\n      // listener from `.mat-mdc-select-panel` and handle all the events here. That may cause\n      // further test breakages so it's left for a follow-up.\n      if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n        event.preventDefault();\n        this.close();\n      }\n    }\n    _onFocus() {\n      if (!this.disabled) {\n        this._focused = true;\n        this.stateChanges.next();\n      }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n      this._focused = false;\n      this._keyManager?.cancelTypeahead();\n      if (!this.disabled && !this.panelOpen) {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      }\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n      return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n      return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n      // Defer setting the value in order to avoid the \"Expression\n      // has changed after it was checked\" errors from Angular.\n      Promise.resolve().then(() => {\n        if (this.ngControl) {\n          this._value = this.ngControl.value;\n        }\n        this._setSelectionByValue(this._value);\n        this.stateChanges.next();\n      });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n      this.options.forEach(option => option.setInactiveStyles());\n      this._selectionModel.clear();\n      if (this.multiple && value) {\n        if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n          throw getMatSelectNonArrayValueError();\n        }\n        value.forEach(currentValue => this._selectOptionByValue(currentValue));\n        this._sortValues();\n      } else {\n        const correspondingOption = this._selectOptionByValue(value);\n        // Shift focus to the active item. Note that we shouldn't do this in multiple\n        // mode, because we don't know what option the user interacted with last.\n        if (correspondingOption) {\n          this._keyManager.updateActiveItem(correspondingOption);\n        } else if (!this.panelOpen) {\n          // Otherwise reset the highlighted option. Note that we only want to do this while\n          // closed, because doing it while open can shift the user's focus unnecessarily.\n          this._keyManager.updateActiveItem(-1);\n        }\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (this._selectionModel.isSelected(option)) {\n          return false;\n        }\n        try {\n          // Treat null as a special reset value.\n          return (option.value != null || this.canSelectNullableOptions) && this._compareWith(option.value, value);\n        } catch (error) {\n          if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            // Notify developers of errors in their comparator.\n            console.warn(error);\n          }\n          return false;\n        }\n      });\n      if (correspondingOption) {\n        this._selectionModel.select(correspondingOption);\n      }\n      return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n      // Always re-assign an array, because it might have been mutated.\n      if (newValue !== this._value || this._multiple && Array.isArray(newValue)) {\n        if (this.options) {\n          this._setSelectionByValue(newValue);\n        }\n        this._value = newValue;\n        return true;\n      }\n      return false;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate = option => {\n      if (this.panelOpen) {\n        // Support keyboard focusing disabled options in an ARIA listbox.\n        return false;\n      }\n      // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n      // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n      // closed.\n      return option.disabled;\n    };\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n      if (this.panelWidth === 'auto') {\n        const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin ? preferredOrigin.elementRef : preferredOrigin || this._elementRef;\n        return refToMeasure.nativeElement.getBoundingClientRect().width;\n      }\n      return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n      if (this.options) {\n        for (const option of this.options) {\n          option._changeDetectorRef.markForCheck();\n        }\n      }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(this.typeaheadDebounceInterval).withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withHomeAndEnd().withPageUpDown().withAllowedModifierKeys(['shiftKey']).skipPredicate(this._skipPredicate);\n      this._keyManager.tabOut.subscribe(() => {\n        if (this.panelOpen) {\n          // Select the active item when tabbing away. This is consistent with how the native\n          // select behaves. Note that we only want to do this in single selection mode.\n          if (!this.multiple && this._keyManager.activeItem) {\n            this._keyManager.activeItem._selectViaInteraction();\n          }\n          // Restore focus to the trigger before closing. Ensures that the focus\n          // position won't be lost if the user got focus into the overlay.\n          this.focus();\n          this.close();\n        }\n      });\n      this._keyManager.change.subscribe(() => {\n        if (this._panelOpen && this.panel) {\n          this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n        } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n      });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n      const changedOrDestroyed = merge(this.options.changes, this._destroy);\n      this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n        this._onSelect(event.source, event.isUserInput);\n        if (event.isUserInput && !this.multiple && this._panelOpen) {\n          this.close();\n          this.focus();\n        }\n      });\n      // Listen to changes in the internal state of the options and react accordingly.\n      // Handles cases like the labels of the selected options changing.\n      merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n        // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n        // be the result of an expression changing. We have to use `detectChanges` in order\n        // to avoid \"changed after checked\" errors (see #14793).\n        this._changeDetectorRef.detectChanges();\n        this.stateChanges.next();\n      });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n      const wasSelected = this._selectionModel.isSelected(option);\n      if (!this.canSelectNullableOptions && option.value == null && !this._multiple) {\n        option.deselect();\n        this._selectionModel.clear();\n        if (this.value != null) {\n          this._propagateChanges(option.value);\n        }\n      } else {\n        if (wasSelected !== option.selected) {\n          option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n        }\n        if (isUserInput) {\n          this._keyManager.setActiveItem(option);\n        }\n        if (this.multiple) {\n          this._sortValues();\n          if (isUserInput) {\n            // In case the user selected the option with their mouse, we\n            // want to restore focus back to the trigger, in order to\n            // prevent the select keyboard controls from clashing with\n            // the ones from `mat-option`.\n            this.focus();\n          }\n        }\n      }\n      if (wasSelected !== this._selectionModel.isSelected(option)) {\n        this._propagateChanges();\n      }\n      this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n      if (this.multiple) {\n        const options = this.options.toArray();\n        this._selectionModel.sort((a, b) => {\n          return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n        });\n        this.stateChanges.next();\n      }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n      let valueToEmit;\n      if (this.multiple) {\n        valueToEmit = this.selected.map(option => option.value);\n      } else {\n        valueToEmit = this.selected ? this.selected.value : fallbackValue;\n      }\n      this._value = valueToEmit;\n      this.valueChange.emit(valueToEmit);\n      this._onChange(valueToEmit);\n      this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n      if (this._keyManager) {\n        if (this.empty) {\n          // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n          // because it activates the first option that passes the skip predicate, rather than the\n          // first *enabled* option.\n          let firstEnabledOptionIndex = -1;\n          for (let index = 0; index < this.options.length; index++) {\n            const option = this.options.get(index);\n            if (!option.disabled) {\n              firstEnabledOptionIndex = index;\n              break;\n            }\n          }\n          this._keyManager.setActiveItem(firstEnabledOptionIndex);\n        } else {\n          this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n        }\n      }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n      return !this._panelOpen && !this.disabled && this.options?.length > 0 && !!this._overlayDir;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n      if (this.ariaLabel) {\n        return null;\n      }\n      const labelId = this._parentFormField?.getLabelId() || null;\n      const labelExpression = labelId ? labelId + ' ' : '';\n      return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n      if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n        return this._keyManager.activeItem.id;\n      }\n      return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n      if (this.ariaLabel) {\n        return null;\n      }\n      let value = this._parentFormField?.getLabelId() || '';\n      if (this.ariaLabelledby) {\n        value += ' ' + this.ariaLabelledby;\n      }\n      // The value should not be used for the trigger's aria-labelledby,\n      // but this currently \"breaks\" accessibility tests since they complain\n      // there is no aria-labelledby. This is because they are not setting an\n      // appropriate label on the form field or select.\n      // TODO: remove this conditional after fixing clients by ensuring their\n      // selects have a label applied.\n      if (!value) {\n        value = this._valueId;\n      }\n      return value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get describedByIds() {\n      const element = this._elementRef.nativeElement;\n      const existingDescribedBy = element.getAttribute('aria-describedby');\n      return existingDescribedBy?.split(' ') || [];\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n      if (ids.length) {\n        this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n      } else {\n        this._elementRef.nativeElement.removeAttribute('aria-describedby');\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n      this.focus();\n      this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n      // Since the panel doesn't overlap the trigger, we\n      // want the label to only float when there's a value.\n      return this.panelOpen || !this.empty || this.focused && !!this.placeholder;\n    }\n    static ɵfac = function MatSelect_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSelect)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatSelect,\n      selectors: [[\"mat-select\"]],\n      contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MAT_SELECT_TRIGGER, 5);\n          i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        }\n      },\n      viewQuery: function MatSelect_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n          i0.ɵɵviewQuery(_c1, 5);\n          i0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._overlayDir = _t.first);\n        }\n      },\n      hostAttrs: [\"role\", \"combobox\", \"aria-haspopup\", \"listbox\", 1, \"mat-mdc-select\"],\n      hostVars: 21,\n      hostBindings: function MatSelect_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n            return ctx._handleKeydown($event);\n          })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n            return ctx._onFocus();\n          })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n            return ctx._onBlur();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-controls\", ctx.panelOpen ? ctx.id + \"-panel\" : null)(\"aria-expanded\", ctx.panelOpen)(\"aria-label\", ctx.ariaLabel || null)(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n          i0.ɵɵclassProp(\"mat-mdc-select-disabled\", ctx.disabled)(\"mat-mdc-select-invalid\", ctx.errorState)(\"mat-mdc-select-required\", ctx.required)(\"mat-mdc-select-empty\", ctx.empty)(\"mat-mdc-select-multiple\", ctx.multiple)(\"mat-select-open\", ctx.panelOpen);\n        }\n      },\n      inputs: {\n        userAriaDescribedBy: [0, \"aria-describedby\", \"userAriaDescribedBy\"],\n        panelClass: \"panelClass\",\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        disableRipple: [2, \"disableRipple\", \"disableRipple\", booleanAttribute],\n        tabIndex: [2, \"tabIndex\", \"tabIndex\", value => value == null ? 0 : numberAttribute(value)],\n        hideSingleSelectionIndicator: [2, \"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute],\n        placeholder: \"placeholder\",\n        required: [2, \"required\", \"required\", booleanAttribute],\n        multiple: [2, \"multiple\", \"multiple\", booleanAttribute],\n        disableOptionCentering: [2, \"disableOptionCentering\", \"disableOptionCentering\", booleanAttribute],\n        compareWith: \"compareWith\",\n        value: \"value\",\n        ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n        ariaLabelledby: [0, \"aria-labelledby\", \"ariaLabelledby\"],\n        errorStateMatcher: \"errorStateMatcher\",\n        typeaheadDebounceInterval: [2, \"typeaheadDebounceInterval\", \"typeaheadDebounceInterval\", numberAttribute],\n        sortComparator: \"sortComparator\",\n        id: \"id\",\n        panelWidth: \"panelWidth\",\n        canSelectNullableOptions: [2, \"canSelectNullableOptions\", \"canSelectNullableOptions\", booleanAttribute]\n      },\n      outputs: {\n        openedChange: \"openedChange\",\n        _openedStream: \"opened\",\n        _closedStream: \"closed\",\n        selectionChange: \"selectionChange\",\n        valueChange: \"valueChange\"\n      },\n      exportAs: [\"matSelect\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }]), i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c3,\n      decls: 11,\n      vars: 9,\n      consts: [[\"fallbackOverlayOrigin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [\"panel\", \"\"], [\"cdk-overlay-origin\", \"\", 1, \"mat-mdc-select-trigger\", 3, \"click\"], [1, \"mat-mdc-select-value\"], [1, \"mat-mdc-select-placeholder\", \"mat-mdc-select-min-line\"], [1, \"mat-mdc-select-value-text\"], [1, \"mat-mdc-select-arrow-wrapper\"], [1, \"mat-mdc-select-arrow\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"focusable\", \"false\", \"aria-hidden\", \"true\"], [\"d\", \"M7 10l5 5 5-5z\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"detach\", \"backdropClick\", \"overlayKeydown\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayFlexibleDimensions\"], [1, \"mat-mdc-select-min-line\"], [\"role\", \"listbox\", \"tabindex\", \"-1\", 3, \"keydown\", \"ngClass\"]],\n      template: function MatSelect_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵprojectionDef(_c2);\n          i0.ɵɵelementStart(0, \"div\", 2, 0);\n          i0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.open());\n          });\n          i0.ɵɵelementStart(3, \"div\", 3);\n          i0.ɵɵconditionalCreate(4, MatSelect_Conditional_4_Template, 2, 1, \"span\", 4)(5, MatSelect_Conditional_5_Template, 3, 1, \"span\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 6)(7, \"div\", 7);\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(8, \"svg\", 8);\n          i0.ɵɵelement(9, \"path\", 9);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵtemplate(10, MatSelect_ng_template_10_Template, 3, 10, \"ng-template\", 10);\n          i0.ɵɵlistener(\"detach\", function MatSelect_Template_ng_template_detach_10_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.close());\n          })(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_10_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.close());\n          })(\"overlayKeydown\", function MatSelect_Template_ng_template_overlayKeydown_10_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx._handleOverlayKeydown($event));\n          });\n        }\n        if (rf & 2) {\n          const fallbackOverlayOrigin_r4 = i0.ɵɵreference(1);\n          i0.ɵɵadvance(3);\n          i0.ɵɵattribute(\"id\", ctx._valueId);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx.empty ? 4 : 5);\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"cdkConnectedOverlayDisableClose\", true)(\"cdkConnectedOverlayPanelClass\", ctx._overlayPanelClass)(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", ctx._preferredOverlayOrigin || fallbackOverlayOrigin_r4)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayWidth\", ctx._overlayWidth)(\"cdkConnectedOverlayFlexibleDimensions\", true);\n        }\n      },\n      dependencies: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass],\n      styles: [\"@keyframes _mat-select-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-select-exit{from{opacity:1}to{opacity:0}}.mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-disabled .mat-mdc-select-placeholder{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-select-open .mat-mdc-select-arrow{transform:rotate(180deg)}.mat-form-field-animations-enabled .mat-mdc-select-arrow{transition:transform 80ms linear}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:relative;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-select-panel-animations-enabled{animation:_mat-select-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-select-panel-animations-enabled.mat-select-panel-exit{animation:_mat-select-exit 100ms linear}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field:not(.mat-form-field-animations-enabled) .mat-mdc-select-placeholder,._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatSelect;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nlet MatSelectTrigger = /*#__PURE__*/(() => {\n  class MatSelectTrigger {\n    static ɵfac = function MatSelectTrigger_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSelectTrigger)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatSelectTrigger,\n      selectors: [[\"mat-select-trigger\"]],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_SELECT_TRIGGER,\n        useExisting: MatSelectTrigger\n      }])]\n    });\n  }\n  return MatSelectTrigger;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSelectModule = /*#__PURE__*/(() => {\n  class MatSelectModule {\n    static ɵfac = function MatSelectModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSelectModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatSelectModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n    });\n  }\n  return MatSelectModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger };\n","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset);\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n  return uuid;\n}\nexport default stringify;","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n    getRandomValues = crypto.getRandomValues.bind(crypto);\n  }\n  return getRandomValues(rnds8);\n}","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random ?? options.rng?.() ?? rng();\n  if (rnds.length < 16) {\n    throw new Error('Random bytes length must be >= 16');\n  }\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80;\n  if (buf) {\n    offset = offset || 0;\n    if (offset < 0 || offset + 16 > buf.length) {\n      throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n    }\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify(rnds);\n}\nexport default v4;","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgxDcDropdownService {\n}\n","import { Directive, TemplateRef, ViewContainerRef, inject, input } from '@angular/core'\n\n@Directive({\n  selector: '[ngxDcDropdownHeader]',\n  standalone: true\n})\nexport class NgxDcDropdownHeaderDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef)\n  ViewContainerRef = inject(ViewContainerRef)\n\n  public readonly height = input<string>(null, { alias: \"ngxDcDropdownHeaderHeight\" });\n}\n\n@Directive({\n  selector: '[ngxDcDropdownOptionsHeader]',\n  standalone: true\n})\nexport class NgxDcDropdownOptionsHeaderDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef)\n  ViewContainerRef = inject(ViewContainerRef)\n}\n\n@Directive({\n  selector: '[ngxDcDropdownItem]',\n  standalone: true\n})\nexport class NgxDcDropdownItemDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef)\n  ViewContainerRef = inject(ViewContainerRef)\n\n  public readonly height = input<string>(null, { alias: \"ngxDcDropdownItemHeight\" });\n}\n\n@Directive({\n  selector: '[ngxDcDropdownNoItems]',\n  standalone: true\n})\nexport class NgxDcDropdownNoItemsDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef)\n  ViewContainerRef = inject(ViewContainerRef)\n}\n\n@Directive({\n  selector: '[ngxDcDropdownLoading]',\n  standalone: true\n})\nexport class NgxDcDropdownLoadingDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef)\n  ViewContainerRef = inject(ViewContainerRef)\n}\n","import { CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport } from \"@angular/cdk/scrolling\";\nimport { AsyncPipe, NgClass, NgTemplateOutlet } from \"@angular/common\";\nimport { Component, ElementRef, HostBinding, HostListener, OnDestroy, OnInit, ViewEncapsulation, contentChild, inject, input, model, output } from '@angular/core';\nimport { MatRipple } from \"@angular/material/core\";\nimport { MatIcon } from \"@angular/material/icon\";\nimport { MatListItem, MatListSubheaderCssMatStyler, MatNavList } from \"@angular/material/list\";\nimport { MatProgressBar } from \"@angular/material/progress-bar\";\nimport { NgxDcFilledCountPipe, NgxDcModalService, NgxDcModalServiceToken } from \"@devcrate/ngx-dc-utils\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport { v4 as uuid } from 'uuid';\nimport {\n  NgxDcDropdownDataSource\n} from \"./dropdown-data.source\";\nimport {\n  NgxDcDropdownHeaderDirective,\n  NgxDcDropdownItemDirective, NgxDcDropdownLoadingDirective, NgxDcDropdownNoItemsDirective,\n  NgxDcDropdownOptionsHeaderDirective\n} from \"./dropdown.directives\";\n\n@Component({\n    selector: 'ngx-dc-dropdown',\n    imports: [\n        NgTemplateOutlet,\n        AsyncPipe,\n        MatIcon,\n        MatListItem,\n        MatListSubheaderCssMatStyler,\n        MatNavList,\n        MatProgressBar,\n        NgClass,\n        NgxDcFilledCountPipe,\n        CdkFixedSizeVirtualScroll,\n        CdkVirtualForOf,\n        CdkVirtualScrollViewport,\n        MatRipple,\n    ],\n    templateUrl: './dropdown.component.html',\n    styleUrl: './dropdown.component.scss',\n    encapsulation: ViewEncapsulation.None,\n})\nexport class NgxDcDropdownComponent<GetDataItemsT, FinalDataItemsT = GetDataItemsT, RetrievedItemT = GetDataItemsT> implements OnInit, OnDestroy {\n  public dropdownId = `dc-${uuid()}`\n  public modalService = inject<NgxDcModalService>(NgxDcModalServiceToken);\n\n  // We should put the InfiniteSidePaneListDataSource here because it extends all the other functionality for the data source\n  public dataSource = input.required<NgxDcDropdownDataSource<GetDataItemsT, FinalDataItemsT, RetrievedItemT>>();\n  \n  public opened = model<boolean>(false);\n\n  public readonly allowClickOutside = input<boolean>(true);\n  public readonly allowOptionClick = input<boolean>(true);\n  public optionClicked = output<FinalDataItemsT>();\n  public headerClicked = output<void>();\n  \n  public readonly useGlobalLoader = input(false);\n  public readonly appearance = input<'fill' | 'outline' | 'none' | 'rounded-fill' | 'rounded-outline'>('rounded-fill');\n  public readonly roundedEdgeSize = input<string>('4px');\n\n  public focusedItemChange = output<RetrievedItemT>();\n\n  public readonly useInfiniteScrolling = input<boolean>(false);\n\n  @HostBinding('class.infinite-scrolling')\n  public get showInfiniteScrollingClass() {\n    return this.useInfiniteScrolling()\n  }\n\n  @HostListener(\"document:click\", [\"$event\"])\n  public onClick(event: MouseEvent) {\n    if (!this.opened()) { return }\n    if (!this.allowClickOutside()) { return }\n    const meDropdown = (event.target as HTMLElement).closest(`#${this.dropdownId}`)\n    const clickedOnDropdown = !!meDropdown\n    const anyPanel = Array.from(document.querySelectorAll('.cdk-overlay-pane'))\n    const somePanelIsOpened = anyPanel.length > 0\n    const isInPanel = !!anyPanel.find(panel => panel.querySelector((`#${this.dropdownId}`)))\n\n    // The following shows each scenario\n    // if the dropdown is in a modal, and we didn't click on the dropdown itself, close it\n    // If the dropdown is NOT in the modal, but under the modal, don't close it\n    // If the dropdown is in the modal, and we clicked on the dropdown itself, close it\n    // If the dropdown is NOT in the modal, but under the modal and we clicked on the dropdown itself, don't close it because it's not interactable\n    // if there is no modal opened, and we clicked on the dropdown itself, close it\n    // if there is no modal and we didn't click on the dropdown itself, close it\n\n    if ((isInPanel || !somePanelIsOpened) && !clickedOnDropdown) {\n      this.opened.set(false)\n    }\n  }\n\n  public get baseAppearanceName() {\n    return this.appearance().replace('rounded-', '')\n  }\n\n  @HostBinding('style.background-color')\n  public get backgroundColor(): string {\n    return {\n      'none': '',\n      'fill': 'var(--mat-sys-surface-container-low)',\n      'outline': 'transparent',\n    }[this.baseAppearanceName] || ''\n  }\n\n  @HostBinding('style.border-color')\n  public get borderColor(): string {\n    return {\n      'none': '',\n      'fill': '',\n      'outline': '1px solid var(--mat-sys-on-surface)',\n    }[this.baseAppearanceName] || ''\n  }\n\n  @HostBinding('style.border-radius')\n  public get roundedEdges(): boolean {\n    return {\n      'rounded-outline': this.roundedEdgeSize(),\n      'rounded-fill': this.roundedEdgeSize(),\n    }[this.appearance()] || ''\n  }\n\n  public destroy$ = new BehaviorSubject(false)\n  readonly dropdownHeader = contentChild(NgxDcDropdownHeaderDirective);\n  readonly dropdownOptionsHeader = contentChild(NgxDcDropdownOptionsHeaderDirective);\n\n  readonly dropdownOption = contentChild(NgxDcDropdownItemDirective);\n\n  readonly dropdownLoading = contentChild(NgxDcDropdownLoadingDirective);\n\n  readonly noItems = contentChild(NgxDcDropdownNoItemsDirective);\n\n  readonly scrollViewport = contentChild(CdkVirtualScrollViewport);\n  readonly matNavListElement = contentChild('matNavList', { read: ElementRef });\n\n  public get disabled() {\n    return this.dataSource().actualDataLength === 0\n  }\n\n  public ngOnDestroy() {\n    this.destroy$.next(true)\n    this.destroy$.complete()\n  }\n\n  public resetItemSelected() {\n    this.dataSource().selectedItem.next(null)\n    this.dataSource().retrievedItem.next(null)\n  }\n\n  public ngOnInit() {\n    if (this.useGlobalLoader()) {\n      this.dataSource().loading.pipe(takeUntil(this.destroy$)).subscribe(loading => {\n        this.modalService.showGlobalLoadingBar?.next(loading)\n      })\n\n      this.dataSource().itemLoading.pipe(takeUntil(this.destroy$)).subscribe(loading => {\n        this.modalService.showGlobalLoadingBar?.next(loading)\n      })\n    }\n  }\n\n  public async scrollToTop() {\n    await new Promise<void>(resolve => setTimeout(() => {\n      if (this.useInfiniteScrolling()) {\n        const scrollViewport = this.scrollViewport();\n        if (scrollViewport) {\n          scrollViewport.scrollToIndex(0, 'instant')\n        }\n      } else {\n        const matNavListElement = this.matNavListElement();\n        if (matNavListElement?.nativeElement) {\n          matNavListElement.nativeElement.scrollToIndex(0, 'instant')\n        }\n      }\n      resolve()\n    }, 0))\n  }\n\n  public reset() {\n    this.resetItemSelected()\n    this.dataSource().reset()\n  }\n\n  public open() {\n    this.opened.set(true)\n  }\n\n  public close() {\n    this.opened.set(false)\n  }\n\n  public async onPaneItemClicked(item: FinalDataItemsT): Promise<void> {\n    if (this.allowOptionClick()) {\n      this.handlePaneItemClick(item)\n    }\n    this.optionClicked.emit(item)\n  }\n\n  public async handlePaneItemClick(item: FinalDataItemsT): Promise<void> {\n    await this.dataSource().onPaneItemClicked(item)\n    this.opened.set(false)\n  }\n\n  protected readonly focus = focus;\n\n  public onDropdownClick() {\n    this.headerClicked.emit()\n    if (!this.allowOptionClick()) { return }\n    this.opened.set(!this.opened())\n  }\n}\n","<div\n  class=\"dc-dropdown mat-elevation-z2\"\n  [id]=\"dropdownId\"\n  data-testid=\"ngx-dc-dropdown\"\n  [class.opened]=\"opened()\"\n  [class.disabled]=\"disabled\"\n>\n  <div\n    matRipple\n    [ngClass]=\"dataSource().ngClassTriggerItem(dataSource().selectedItem | async)\"\n    (click)=\"onDropdownClick()\"\n  >\n    <div\n      mat-subheader\n      class=\"dc-dropdown-header\"\n      [style.height]=\"'calc(' + (dropdownHeader()?.height() || dataSource().rowHeight || 48) + 'px' + ' - 1.5rem)'\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"dropdownHeader()?.templateRef; context: {\n          $implicit: dataSource().selectedItem | async,\n          opened: opened(),\n          filteredCount: (dataSource().filteredData$ | async) | filledCount,\n          currentCount: dataSource().actualDataLength,\n          totalCount: dataSource().count$ | async,\n        }\"\n      ></ng-container>\n      <span class=\"fill\"></span>\n      <mat-icon class=\"dropdown-arrow\">expand_more</mat-icon>\n    </div>\n  </div>\n  @if (dropdownOptionsHeader()) {\n    <hr class=\"dc-dropdown-bottom-header-divider\" />\n    <div\n      class=\"dc-dropdown-bottom-header\"\n      data-testid=\"ngx-dc-dropdown-bottom-header\"\n      [ngClass]=\"dataSource().ngClassBottomHeader(dataSource().selectedItem | async)\"\n    >\n      <ng-container\n        *ngTemplateOutlet=\"dropdownOptionsHeader()?.templateRef; context: {\n            $implicit: dataSource().selectedItem | async,\n            opened: opened(),\n            filteredCount: (dataSource().filteredData$ | async) | filledCount,\n            currentCount: dataSource().actualDataLength,\n            totalCount: dataSource().count$ | async,\n          }\"\n      ></ng-container>\n    </div>\n  }\n  @if (dataSource().loading | async) {\n    <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\n  }\n</div>\n\n<div class=\"dc-dropdown-items-container\" [class.opened]=\"opened()\">\n  <mat-nav-list class=\"dc-dropdown-items mat-elevation-z2\" data-testid=\"ngx-dc-dropdown-items\" #matNavList>\n    <!-- Displays this per item -- see below -->\n    <ng-template let-item let-i=\"index\" #perItem>\n      <mat-list-item\n        class=\"dc-dropdown-item\"\n        data-testid=\"ngx-dc-dropdown-item\"\n        [ngClass]=\"dataSource().ngClassDropdownItem(dataSource().selectedItem | async, item, i)\"\n        [style.height]=\"(dropdownOption()?.height() || dataSource()?.rowHeight || dropdownHeader()?.height() || 48) + 'px'\"\n        (click)=\"onPaneItemClicked(item)\"\n        [activated]=\"dataSource().selectedItem.value && item && dataSource().isActiveItem(dataSource().selectedItem.value, item)\"\n      >\n        @if (!item || (dataSource().loading | async)) {\n          @if (dropdownLoading()) {\n            <ng-container\n              *ngTemplateOutlet=\"dropdownLoading()?.templateRef; context: {\n                opened: opened(),\n              }\"\n            ></ng-container>\n          } @else {\n            Loading...\n          }\n        } @else {\n          @if (dropdownOption()) {\n            <ng-container\n              *ngTemplateOutlet=\"dropdownOption()?.templateRef; context: {\n                $implicit: item,\n                filteredCount: (dataSource().filteredData$ | async) | filledCount,\n                currentCount: dataSource().actualDataLength,\n                totalCount: dataSource().count$ | async,\n                opened: opened(),\n                index: i,\n              }\"\n            ></ng-container>\n          }\n        }\n      </mat-list-item>\n    </ng-template>\n\n    @if (useInfiniteScrolling()) {\n      <cdk-virtual-scroll-viewport class=\"mat-elevation-z2\" [itemSize]=\"dataSource().rowHeight\" [minBufferPx]=\"dataSource().rowHeight * (dataSource().minBufferMultiplier || 5)\" [maxBufferPx]=\"dataSource().rowHeight * (dataSource().maxBufferMultiplier || 10)\">\n        <!-- Display when dropdown is loading or have no items -->\n        @if (!dataSource().loading.value && dataSource().actualDataLength == 0) {\n          <mat-list-item\n            [disabled]=\"true\"\n            class=\"dc-dropdown-item\"\n            [style.height]=\"(dropdownOption()?.height() || dropdownHeader()?.height() || dataSource()?.rowHeight || 48) + 'px'\"\n            data-testid=\"ngx-dc-dropdown-no-item\"\n          >\n            <ng-container\n              *ngTemplateOutlet=\"noItems()?.templateRef; context: {\n              opened: opened(),\n            }\"\n            ></ng-container>\n          </mat-list-item>\n        }\n\n        <ng-container *cdkVirtualFor=\"let item of dataSource(); let i = index\">\n          <ng-container *ngTemplateOutlet=\"perItem; context: { $implicit: item, index: i }\"></ng-container>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n    } @else {\n      <!-- Display when dropdown is loading or have no items -->\n      @if (!dataSource().loading.value && dataSource().actualDataLength == 0) {\n        <mat-list-item\n          [disabled]=\"true\"\n          class=\"dc-dropdown-item\"\n          [style.height]=\"(dropdownOption()?.height() || dropdownHeader()?.height() || dataSource()?.rowHeight || 48) + 'px'\"\n          data-testid=\"ngx-dc-dropdown-no-item\"\n        >\n          <ng-container\n            *ngTemplateOutlet=\"noItems()?.templateRef; context: {\n              opened: opened(),\n            }\"\n          ></ng-container>\n        </mat-list-item>\n      }\n\n      @for (item of dataSource().filteredData$ | async; track dataSource().trackItems(item); let i = $index) {\n        <ng-container *ngTemplateOutlet=\"perItem; context: { $implicit: item, index: i }\"></ng-container>\n      }\n    }\n  </mat-nav-list>\n</div>\n","import {BehaviorSubject, firstValueFrom, Observable, Subscription} from \"rxjs\";\nimport {HttpClient, HttpResponse} from \"@angular/common/http\";\nimport {NgxDcDataSource, PageableResult} from \"@devcrate/ngx-dc-data-sources\";\nimport {CollectionViewer, DataSource} from \"@angular/cdk/collections\";\n\nexport const INFINITE_DEFAULT_MAX_TOTAL_COUNT = 1000\nexport const INFINITE_DEFAULT_PAGE_SIZE = 25\n\nexport abstract class NgxDcDropdownDataSource<\n  GetDataItemsT = any, FinalDataItemsT = GetDataItemsT, RetrievedPaneItemT = GetDataItemsT\n> extends NgxDcDataSource<GetDataItemsT, FinalDataItemsT> {\n  public rowHeight: number = null\n  public minBufferMultiplier = 5\n  public maxBufferMultiplier = 10\n  \n  /** The data given for the details of the selected item */\n  public retrievedItem = new BehaviorSubject<RetrievedPaneItemT>(null)\n\n  /** When a pane item is clicked, this is set to true */\n  public selectedItem = new BehaviorSubject<FinalDataItemsT>(null)\n\n  /** Needed for the for loop when iterating over the pane items */\n  public abstract trackItems(item: FinalDataItemsT): any\n\n  /**\n   * Sets the item on the list pane to an active state. The item on the list pane is a mat-list-item. The `activated`\n   * boolean is set to true when this function returns true.\n   *\n   * @param selectedItem {dao.selectedItem} The item that is currently selected in the details pane\n   * @param currentItem The item that is currently being iterated over in the list pane\n   */\n  public abstract isActiveItem(selectedItem: FinalDataItemsT, currentItem: FinalDataItemsT): boolean\n\n  /**\n   * When true, the item on the list pane will be disabled.\n   *\n   * @param selectedItem The item that is currently selected in the details pane\n   */\n  public isItemDisabled(selectedItem: FinalDataItemsT): boolean {\n    return false\n  }\n\n  /**\n   * This is the server call to get the data for the details pane. This is an inner\n   * call made in the `onPaneItemClicked` function.\n   *\n   * Override this function to get the data for the `ngxDcPaneContent` let context.\n   *\n   * @param item The item that was clicked on the list pane\n   */\n  public async retrieveItem(item: FinalDataItemsT): Promise<RetrievedPaneItemT> {\n    return item as unknown as RetrievedPaneItemT\n  }\n\n  /**\n   * When a list pane item is clicked, this function is called.\n   * Its purpose is to retrieve the data needed for the details pane\n   *\n   * When you use `ngx-dc-side-pane-list`, and use the `ngxDcSidePaneItem` directive, this function is called when the\n   * parent element of that content is clicked.\n   *\n   * The let context in the `ngxDcPaneContent` directive is the result of this function.\n   *\n   * ```typescript\n   * <ngx-dc-side-pane-list [dao]=\"dao\" ...>\n   *   <ng-container *ngxDcSidePaneItem=\"let item; let index = index\"></ng-container>\n   *   <ng-container *ngxDcPaneContent=\"let currentItem\"></ng-container>\n   * </ngx-dc-side-pane-list>\n   * ```\n   *\n   * This function is generally not overridden, but the `retrieveItem` function is.\n   *\n   * @param item The item that was clicked on the list pane\n   * @param force If true, the function will not stop if the item is already selected so it can refresh items.\n   *\n   * @returns The data for the details pane, which is then set to the `retrievedItem` in the dao, and passed into\n   *          the `ngxDcPaneContent` directive.\n   */\n  public async onPaneItemClicked(item: FinalDataItemsT, force = false): Promise<RetrievedPaneItemT> {\n    if (this.isItemDisabled(item)) { return null }\n    if (!force && this.selectedItem.value && item && this.isActiveItem(this.selectedItem.value, item)) { return null }\n    this.selectedItem.next(item)\n    this.itemLoading.next(true)\n    const result = await this.retrieveItem(item)\n    this.retrievedItem.next(result)\n    this.itemLoading.next(false)\n    return result\n  }\n\n  /**\n   * Refreshes the item retrieved that is selected\n   */\n  public async refreshRetrievedItem(): Promise<RetrievedPaneItemT> {\n    if (!this.selectedItem.value) return null\n    return this.onPaneItemClicked(this.selectedItem.value, true)\n  }\n\n  /**\n   * This is the `[ngClass]` function for the list pane items. It expects what the {NgClass} object.\n   * The key is the class name and the value is a boolean saying to add the class or not.\n   *\n   * @param selectedItem The item that is currently selected in the details pane\n   *\n   * @returns {NgClass} object\n   *\n   * @example\n   *\n   * ```typescript\n   * public ngClassTriggerItem(focusedItem: FinalDataItemsT, item: FinalDataItemsT, index: number) {\n   *   return {\n   *     'pending-bg-color': item.status === 'Pending',\n   *     'odd': index % 2 === 0,\n   *   }\n   * }\n   * ```\n   */\n  public ngClassTriggerItem(selectedItem: FinalDataItemsT) {\n    return {}\n  }\n\n  /**\n   * This is the `[ngClass]` function for the bottom header. It expects what the {NgClass} object.\n   * The key is the class name and the value is a boolean saying to add the class or not.\n   *\n   * @param selectedItem The item that is currently selected in the details pane\n   *\n   * @returns {NgClass} object\n   *\n   * @example\n   *\n   * ```typescript\n   * public ngClassBottomHeader(focusedItem: FinalDataItemsT) {\n   *   return {\n   *     'pending-bg-color': focusedItem.status === 'Pending',\n   *   }\n   * }\n   * ```\n   */\n  public ngClassBottomHeader(selectedItem: FinalDataItemsT) {\n    return {}\n  }\n\n  /**\n   * This is the `[ngClass]` function for the dropdown header. It expects what the {NgClass} object.\n   * The key is the class name and the value is a boolean saying to add the class or not.\n   *\n   * @param selectedItem The item that is currently selected in the details pane\n   * @param currentItem The item that is being compared\n   * @param index The index of the {currentItem}\n   * @returns {NgClass} object\n   *\n   * @example\n   *\n   * ```typescript\n   * public ngClassDropdownItem(focusedItem: FinalDataItemsT, item: FinalDataItemsT, index: number) {\n   *   return {\n   *     'pending-bg-color': item.status === 'Pending',\n   *     'odd': index % 2 === 0,\n   *   }\n   * }\n   * ```\n   */\n  public ngClassDropdownItem(selectedItem: FinalDataItemsT, currentItem: FinalDataItemsT, index: number) {\n    return {}\n  }\n\n  /**\n   * Sometimes you need to update the data item locally without refreshing the data for live feedback.\n   * This function allows you to edit the retrievedItem without updating the BehaviorSubject.\n   * \n   * @param updates The updates to apply to the data item\n   * @param matchesId A function that determines if an item matches the criteria\n   */\n  public localUpdateRetrievedDataItem(updates: Partial<RetrievedPaneItemT>, matchesId: (item: RetrievedPaneItemT) => boolean) {\n    if (Array.isArray(this.retrievedItem.value)) {\n      this.retrievedItem.value.forEach(lineItem => {\n        if (matchesId(lineItem)) {\n          for (const key of Object.keys(updates)) {\n            lineItem[key] = updates[key]\n          }\n        }\n      })\n    } else {\n      if (matchesId(this.retrievedItem.value)) {\n        for (const key of Object.keys(updates)) {\n          this.retrievedItem.value[key] = updates[key]\n        }\n      }\n    }\n  }\n\n  \n\n  /**\n   * Sometimes you need to update the data item locally without refreshing the data for live feedback.\n   * This function allows you to edit the selectedItem without updating the BehaviorSubject.\n   * \n   * @param updates The updates to apply to the data item\n   * @param matchesId A function that determines if an item matches the criteria\n   */\n  public localUpdateSelectedDataItem(updates: Partial<FinalDataItemsT>, matchesId: (item: FinalDataItemsT) => boolean) {\n    if (Array.isArray(this.selectedItem.value)) {\n      this.selectedItem.value.forEach(lineItem => {\n        if (matchesId(lineItem)) {\n          for (const key of Object.keys(updates)) {\n            lineItem[key] = updates[key]\n          }\n        }\n      })\n    } else {\n      if (matchesId(this.selectedItem.value)) {\n        for (const key of Object.keys(updates)) {\n          this.selectedItem.value[key] = updates[key]\n        }\n      }\n    }\n  }\n\n  /**\n   * Sometimes you need to update the data item locally without refreshing the data for live feedback.\n   * This function allows you to edit the data$, selectedItem, retrievedItem without updating the BehaviorSubject or sending it to the server.\n   * \n   * @param selectedUpdates The updates to apply to the selected data item\n   * @param selectedMatchesId A function that determines if the selected item matches the criteria to update the selected item with selectedUpdates\n   * @param retrievedUpdates The updates to apply to the retrieved data item\n   * @param retrievedMatchesId A function that determines if the retrieved item matches the criteria to update the retrieved item with retrievedUpdates\n   * \n   * @example\n   * \n   * ```typescript\n   * dao.fullLocalUpdateDataItem(\n   *   { status: 'Updated' },\n   *   item => item.id === selectedItemId,\n   *   { myStatus: 'Updated' },\n   *   item => item.id === retrievedItemId\n   * )\n   * ```\n   */\n  public fullLocalUpdateDataItem(\n    selectedUpdates: Partial<FinalDataItemsT>,\n    selectedMatchesId: (item: FinalDataItemsT) => boolean,\n    retrievedUpdates: Partial<RetrievedPaneItemT>,\n    retrievedMatchesId: (item: RetrievedPaneItemT) => boolean,\n  ) {\n    this.localUpdateDataItem(selectedUpdates, selectedMatchesId)\n    this.localUpdateSelectedDataItem(selectedUpdates, selectedMatchesId)\n    this.localUpdateRetrievedDataItem(retrievedUpdates, retrievedMatchesId)\n  }\n}\n\n\nexport abstract class NgxDcDropdownApiDataSource<\n  GetDataItemsT, FinalDataItemsT = GetDataItemsT, RetrievedPaneItemT = GetDataItemsT, AllowedParamsT = any\n> extends NgxDcDropdownDataSource<GetDataItemsT, FinalDataItemsT, RetrievedPaneItemT> {\n  public abstract relativePath: string\n  public params: Partial<AllowedParamsT> = <AllowedParamsT>{};\n\n  protected constructor(protected httpClient: HttpClient) {\n    super();\n  }\n\n  /**\n   * This allows you to overrride the default behavior of the infinite scroller to set any params based on the\n   * next page the scroll wants.\n   * @param params\n   */\n  public getParams(params: {[key: string]: any }): {[key: string]: any } {\n    return params\n  }\n\n  /**\n   * This allows you to overrride the default behavior of the infinite scroller to set any params based on the\n   * next page the scroll wants.\n   *\n   * This is called each time you initialize or call refresh in the data source (and potentially other cases).\n   */\n  public getCount(response: HttpResponse<GetDataItemsT[]>): number {\n    const xTotalCount = response.headers.get(\"X-Total-Count\")\n    return xTotalCount === 'null' ? null : parseInt(xTotalCount || \"0\", 10)\n  }\n\n  /**\n   * Allows you to override how you get the data for the data source, once its retrieved from the response.\n   *\n   * This is called each time you initialize or call refresh in the data source (and potentially other cases).\n   *\n   * @param response The response of the GET request made with the relativePath for this data source.\n   *\n   * @returns\n   */\n  public getResults(response: HttpResponse<GetDataItemsT[]>): GetDataItemsT[] {\n    return response.body\n  }\n\n  public async retrieveDataItems(overrideParams: any = null): Promise<PageableResult<GetDataItemsT>> {\n    const response = await firstValueFrom(this.httpClient.get<GetDataItemsT[]>(this.relativePath, {\n      params: this.getParams(overrideParams || this.params),\n      observe: 'response',\n    }))\n\n    return <PageableResult<GetDataItemsT>>{\n      count: this.getCount(response),\n      results: this.getResults(response),\n    }\n  }\n}\n\n/**\n * If you need to get data from the server and use infinite scrolling, then use this class.\n * It can be used for `ngx-dc-side-pane-list` component or a CdkVirtualFor.\n */\nexport abstract class NgxDcInfiniteDropdownDataSource<\n  GetDataItemsT = any, FinalDataItemsT = GetDataItemsT, RetrievedPaneItemT = GetDataItemsT, AllowedParamsT = any\n> extends NgxDcDropdownApiDataSource<GetDataItemsT, FinalDataItemsT, RetrievedPaneItemT>\n  implements DataSource<FinalDataItemsT> {\n  /**\n   * This is meant to be used to determine the height of each row in the list pane so infinite\n   * scrolling behaves as it should\n   */\n  public abstract rowHeight: number\n\n  /** Needed to have a set of items added so that when we get the visible data, we only replace that part of the array instead of adding and changing the scroll position */\n  public maxTotalCount: number = INFINITE_DEFAULT_MAX_TOTAL_COUNT\n\n  /** Needed for paging */\n  public pageSize: number = INFINITE_DEFAULT_PAGE_SIZE\n\n  /** The relative path to the endpoint on the server to get the list pane data from */\n  public abstract relativePath: string\n\n  /** The parameters to send to the server as params when making the http GET request using the {relativePath} */\n  public params: Partial<AllowedParamsT> = {} as any\n\n  /** The pages we have queried from the server */\n  public fetchedPages: Set<number> = new Set<number>()\n\n  private cachedData: FinalDataItemsT[]\n  private subscription: Subscription\n\n  /** The current page the user is on (based on the scroll position on the list pane) */\n  public lastPageAccessed: number = null\n\n  protected constructor(httpClient: HttpClient) {\n    super(httpClient)\n    this.prepareInfiniteScroller()\n  }\n\n  /**\n   * This allows you to overrride the default behavior of the infinite scroller to set any params based on the\n   * next page the scroll wants.\n   * @param params\n   */\n  public getParams(params: {[key: string]: any }): {[key: string]: any } {\n    return params\n  }\n\n  /**\n   * This allows you to overrride the default behavior of the infinite scroller to set any params based on the\n   * next page the scroll wants.\n   *\n   * This is called each time you initialize or call refresh in the data source (and potentially other cases).\n   */\n  public getCount(response: HttpResponse<GetDataItemsT[]>): number {\n    const xTotalCount = response.headers.get(\"X-Total-Count\")\n    return xTotalCount === 'null' ? null : parseInt(xTotalCount || \"0\", 10)\n  }\n\n  /**\n   * Allows you to override how you get the data for the data source, once its retrieved from the response.\n   *\n   * This is called each time you initialize or call refresh in the data source (and potentially other cases).\n   *\n   * @param response The response of the GET request made with the relativePath for this data source.\n   *\n   * @returns\n   */\n  public getResults(response: HttpResponse<GetDataItemsT[]>): GetDataItemsT[] {\n    return response.body\n  }\n\n  public async retrieveDataItems(overrideParams: any = null): Promise<PageableResult<GetDataItemsT>> {\n    const response = await firstValueFrom(this.httpClient.get<GetDataItemsT[]>(this.relativePath, {\n      params: this.getParams(overrideParams || this.params),\n      observe: 'response',\n    }))\n\n    return <PageableResult<GetDataItemsT>>{\n      count: this.getCount(response),\n      results: this.getResults(response),\n    }\n  }\n\n  /** This sets up the infinite scroller with an array full of null items so that the scrolling bar\n   * doesn't change in size.\n   *\n   * This is called in the constructor of the class.\n   */\n  public prepareInfiniteScroller() {\n    this.cachedData = Array.from<FinalDataItemsT>({length: this.maxTotalCount});\n    this.fetchedPages = new Set<number>();\n    // Putting in an empty array with null values for the length will trigger the connect function to run from *cdkInfiniteScroller\n    this.data$ = new BehaviorSubject<FinalDataItemsT[]>(this.cachedData);\n    // Initialize filtering here after the data$ is filled so the filter is able to initialize\n    this.initializeFiltering()\n  }\n\n  /**\n   * Ensures that if you need to put initialize back to its original state, you can override `initialize` with this one.\n   */\n  public async originalInitialize() {\n    return super.initialize()\n  }\n\n  public async initialize(): Promise<void> {\n    // Ignore it for infinite scroller since connect function is called\n  }\n\n  /**\n   * Ensures that if you need to put refresh back to its original state, you can override `refresh` with this one.\n   */\n  public async originalRefresh() {\n    return super.refresh()\n  }\n\n  /**\n   * When you need to completely reset the dropdown as if you never used it.\n   * This is useful if you have search functionality and want to reset the entire data before getting the first page\n   */\n  public resetInfiniteScrolling(){\n    this.params = {}\n    // Ensure that page accessed adds 0 since we are resetting, we want to initially initialize\n    this.lastPageAccessed = 0\n    this.cachedData = Array.from<FinalDataItemsT>({length: this.maxTotalCount})\n    this.fetchedPages = new Set<number>()\n    this.fetchedPages.add(0)\n    this.data$.next(this.cachedData)\n    this.count$.next(0)\n    this.initialized = false\n    this.loading.next(false)\n  }\n\n  /**\n   * Infinite scrolling works a bit different than a normal data retrieval. Generally, when you want to update the data\n   * you can call `refresh` and it will clear the data and get all the data again. However, with infinite scrolling is\n   * based on the scroll position, so we need to clear all the data except the current page, and then get the data for\n   * that current page again. This way, as you scroll, the data is fetched as needed.\n   */\n  public clearAllItemsExceptCurrentPage() {\n    // reset all data to nulls\n    if (!this.lastPageAccessed) { this.lastPageAccessed = 0 }\n    const startIndex = 0\n    const endIndex = startIndex + this.pageSize\n    this.cachedData = this.cachedData.map((item, i) => (i >= startIndex && i <= endIndex) ? item : null)\n    this.fetchedPages.clear()\n    // Putting in an empty array with null values for the length will trigger the connect function to run from *cdkInfiniteScroller\n    this.data$.next(this.cachedData)\n    this.count$.next(this.pageSize > this.actualDataLength ? this.actualDataLength : this.pageSize)\n  }\n\n  /**\n   * Allows you to still call refresh in the infinite scroller, but does it in a way that is more efficient for infinite\n   * scrolling.\n   */\n  public async refresh(): Promise<PageableResult<FinalDataItemsT>> {\n    this.loading.next(true)\n    this.clearAllItemsExceptCurrentPage()\n    const pagedData = await this.fetchPageData(this.lastPageAccessed)\n    await this.fetchPage(this.lastPageAccessed, pagedData)\n    this.loading.next(false)\n    return <PageableResult<FinalDataItemsT>>{\n      results: this.data$.value,\n      count: this.count$.value,\n    }\n  }\n\n  /**\n   * Because we implement a DataSource, and use it in `*cdkVirtualFor=\"let item of dao`, we need to implement the\n   * connect and disconnect functions for the Material CDK Virtual Scroll to work and initialize.\n   *\n   * This called when the list pane is initialized with a collectionViewer.\n   * We subscribe to the collectionViewer to know what elements the user is currently viewing in the scroll list pane.\n   * It gives us a range with a start and end element. This is how we determine the start and end pages to fetch.\n   *\n   * At this point, we fetch all the pages that are currently in view and override those specific elements in the array.\n   *\n   * Then we return an observable that we want displayed in the list pane.\n   *\n   * We chose filteredData$, because we also want filtering functionality. Otherwise, we would use data$ instead.\n   * When there is no filter, filteredData$ is the same as data$.\n   *\n   * @param collectionViewer A way to know what elements are currently in view in the list pane\n   *\n   * @returns An observable of the data that is displayed in the list pane\n   */\n  public connect(collectionViewer: CollectionViewer): Observable<FinalDataItemsT[]> {\n    this.loading.next(true)\n    this.subscription = collectionViewer.viewChange.subscribe(async range => {\n      const startPage = this.getPageForIndex(range.start);\n      const endPage = this.getPageForIndex(range.end - 1);\n      const pagesFetched = await Promise.all(Array.from({ length: endPage - startPage + 1}).map(async (_, i) => {\n        const page = i + startPage;\n        const result = await this.fetchPageData(page)\n        return { result, page }\n      }))\n\n      for (const {result, page} of pagesFetched) {\n        if (!result) { continue }\n        await this.fetchPage(page, result)\n      }\n      if (this.loading.value) {\n        this.loading.next(false)\n      }\n    })\n    return this.filteredData$;\n  }\n\n  /**\n   * Retrieve pages data from the server.\n   *\n   * 1. Check to see if we already have the page\n   * 2. Set the last page accessed to the current page and add it to `fetchedPages`\n   * 3. Get the data from the server\n   *\n   * @param page The page number to retrieve\n   *\n   * @return The data from the server\n   */\n  public async fetchPageData(page: number) {\n    if (this.fetchedPages.has(page)) { return null }\n    this.lastPageAccessed = page\n    const isFirstTime = !this.initialized\n    this.initialized = true\n    this.fetchedPages.add(page);\n\n    const startPage = page * this.pageSize\n    return await this.retrieveFinalData({\n      ...this.params,\n      offset: startPage,\n      limit: this.pageSize,\n      includeCount: isFirstTime,\n    });\n  }\n\n  /**\n   * Updates the data based on the server result\n   *\n   * 4. Update certain indexes of the cached data with the new server data\n   * 5. Update the data$ BehaviorSubject with the new data which in turn updates the filteredData$.\n   * 6. Update the count$ BehaviorSubject with the new count\n   *\n   * @param page Page number 0+ to fetch. 0 is the first page\n   * @param serverPagedData\n   *\n   * @returns The newly cached updated data\n   */\n  public async fetchPage(page: number, serverPagedData: PageableResult<FinalDataItemsT>) {\n    if (!serverPagedData) { return null }\n\n    if (page > 0) {\n      serverPagedData.count = this.count$.value\n    } else if (this.cachedData.length < serverPagedData.count) {\n      this.cachedData = this.cachedData.concat(Array.from<FinalDataItemsT>({length: serverPagedData.count - this.cachedData.length}));\n    } else if (this.cachedData.length > serverPagedData.count) {\n      // Make sure the cachedData, which could have undefined items, is the correct length once we get data back for the first time\n      this.cachedData = this.cachedData.slice(0, serverPagedData.count);\n    }\n\n    if (serverPagedData.results.length === 0) {\n      if (serverPagedData.count == null) {\n        // When we receive nothing from the server and count was already received from another call, that\n        // means that we have reached the end of the data, so we filter out the undefined items\n        this.cachedData = this.cachedData.filter(a => !!a)\n      } else {\n        // When we have no results and we have a count, that means we retrieved the count on this query\n        // This means this is the first retrieval and the length is 0.\n        // So there is no data.\n        this.cachedData = []\n      }\n    } else if (serverPagedData.count == serverPagedData.results.length) {\n      // If the count and data match, then there is no more data to retrieve\n      this.cachedData = serverPagedData.results\n    } else {\n      // We received data back from the server, but it's only a paged amount\n      const startPage = page * this.pageSize\n      this.cachedData.splice(startPage, this.pageSize, ...serverPagedData.results)\n    }\n\n    this.data$.next(this.cachedData)\n    this.count$.next(serverPagedData.count || this.actualDataLength)\n    return this.cachedData\n  }\n\n  /**\n   * The `*cdkVirtualFor=\"let item of dao` will call this when the component of the virtual for is destroyed.\n   */\n  public disconnect(): void {\n    this.subscription.unsubscribe();\n  }\n\n  /** Converts an index to the current page number */\n  private getPageForIndex(index: number): number {\n    return Math.floor(index / this.pageSize);\n  }\n}\n\nexport abstract class NgxDcDropdownArrayDataSource<\n  GetDataItemsT, FinalDataItemsT = GetDataItemsT, RetrievedFocusedItemT = GetDataItemsT\n> extends NgxDcDropdownDataSource<GetDataItemsT, FinalDataItemsT, RetrievedFocusedItemT> {\n  protected constructor(items: FinalDataItemsT[]) {\n    super()\n    this.data$.next(items)\n  }\n\n  public async onPaneItemClicked(item: FinalDataItemsT): Promise<RetrievedFocusedItemT> {\n    const result = item as unknown as RetrievedFocusedItemT;\n    this.retrievedItem.next(result)\n    return result\n  }\n\n  public async retrieveDataItems(): Promise<PageableResult<GetDataItemsT>> {\n    await new Promise<void>(resolve => setTimeout(() => resolve(), 1000))\n    return Promise.resolve({count: this.data$.value?.length || 0, results: this.data$.value as unknown as GetDataItemsT[]});\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NgxDcDropdownComponent } from './dropdown.component';\nimport { NgxDcDropdownHeaderDirective, NgxDcDropdownItemDirective, NgxDcDropdownLoadingDirective, NgxDcDropdownNoItemsDirective, NgxDcDropdownOptionsHeaderDirective } from './dropdown.directives';\n\nconst declarations = [\n  NgxDcDropdownComponent,\n  NgxDcDropdownHeaderDirective,\n  NgxDcDropdownOptionsHeaderDirective,\n  NgxDcDropdownItemDirective,\n  NgxDcDropdownLoadingDirective,\n  NgxDcDropdownNoItemsDirective,\n]\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ...declarations,\n  ],\n  exports: declarations,\n})\nexport class NgxDcDropdownModule { }\n","/*\n * Public API Surface of npx-dc-dropdown\n */\n\nexport * from './lib/dropdown.service';\nexport * from './lib/dropdown.component';\nexport * from './lib/dropdown-data.source'\nexport * from './lib/dropdown.directives'\nexport * from './lib/dropdown.module'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"mappings":"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","names":["_c0","_c1","_c2","_c3","MatSelect_Conditional_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r1","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","MatSelect_Conditional_5_Conditional_1_Template","ɵɵprojection","MatSelect_Conditional_5_Conditional_2_Template","MatSelect_Conditional_5_Template","ɵɵconditionalCreate","ɵɵconditional","MatSelect_ng_template_10_Template","_r3","ɵɵgetCurrentView","ɵɵlistener","$event","ɵɵrestoreView","ɵɵresetView","ɵɵclassMap","ɵɵinterpolate1","ɵɵclassProp","ɵɵproperty","ɵɵattribute","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","injector","inject","Injector","createRepositionScrollStrategy","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","_overlay","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MAT_SELECT_TRIGGER","MatSelectChange","source","value","MatSelect","ViewportRuler","ChangeDetectorRef","ElementRef","Directionality","_IdGenerator","Renderer2","MAT_FORM_FIELD","NgControl","LiveAnnouncer","_animationsDisabled","Subject","index","option","panel","labelCount","_countGroupLabelsBeforeOption","element","_getOptionScrollPosition","o1","o2","signal","Validators","fn","newValue","defer","options","startWith","switchMap","merge","EventEmitter","filter","o","map","defaultErrorStateMatcher","ErrorStateMatcher","parentForm","NgForm","parentFormGroup","FormGroupDirective","tabIndex","HostAttributeToken","_ErrorStateTracker","SelectionModel","takeUntil","event","newAriaLabelledby","ngControl","changes","take","modal","panelId","removeAriaReferencedId","addAriaReferencedId","cleanupEvent","exitFallbackTimer","isDisabled","selectedOptions","keyCode","isArrowKey","isOpenKey","manager","hasModifierKey","previouslySelectedOption","selectedOption","isTyping","hasDeselectedOptions","opt","previouslyFocusedIndex","currentValue","correspondingOption","preferredOrigin","CdkOverlayOrigin","ActiveDescendantKeyManager","changedOrDestroyed","isUserInput","wasSelected","a","b","fallbackValue","valueToEmit","firstEnabledOptionIndex","labelId","labelExpression","ids","__ngFactoryType__","ɵɵdefineComponent","rf","ctx","dirIndex","ɵɵcontentQuery","MatOption","MAT_OPTGROUP","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵviewQuery","_c0","_c1","CdkConnectedOverlay","ɵɵlistener","$event","ɵɵattribute","ɵɵclassProp","booleanAttribute","numberAttribute","ɵɵProvidersFeature","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","ɵɵNgOnChangesFeature","_c3","_r1","ɵɵgetCurrentView","ɵɵprojectionDef","_c2","ɵɵelementStart","ɵɵrestoreView","ɵɵresetView","ɵɵconditionalCreate","MatSelect_Conditional_4_Template","MatSelect_Conditional_5_Template","ɵɵelementEnd","ɵɵnamespaceSVG","ɵɵelement","ɵɵtemplate","MatSelect_ng_template_10_Template","fallbackOverlayOrigin_r4","ɵɵreference","ɵɵadvance","ɵɵconditional","ɵɵproperty","NgClass","MatSelectTrigger","ɵɵdefineDirective","MatSelectModule","ɵɵdefineNgModule","ɵɵdefineInjector","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule","byteToHex","unsafeStringify","arr","offset","getRandomValues","rnds8","rng","randomUUID","native_default","v4","options","buf","offset","native_default","rnds","rng","i","unsafeStringify","v4_default","this","dataSource","trackItems","$item","NgxDcDropdownComponent_ng_container_4_Template","rf","ctx","NgxDcDropdownComponent_Conditional_12_ng_container_3_Template","NgxDcDropdownComponent_Conditional_12_Template","tmp_4_0","ctx_r1","ɵɵnextContext","ɵɵpureFunction5","_c1","ɵɵpipeBind1","NgxDcDropdownComponent_Conditional_13_Template","NgxDcDropdownComponent_ng_template_18_Conditional_2_Conditional_0_ng_container_0_Template","NgxDcDropdownComponent_ng_template_18_Conditional_2_Conditional_0_Template","tmp_7_0","ɵɵpureFunction1","_c2","NgxDcDropdownComponent_ng_template_18_Conditional_2_Conditional_1_Template","NgxDcDropdownComponent_ng_template_18_Conditional_2_Template","NgxDcDropdownComponent_ng_template_18_Conditional_4_Conditional_0_ng_container_0_Template","NgxDcDropdownComponent_ng_template_18_Conditional_4_Conditional_0_Template","ɵɵpureFunction6","_c3","item_r4","i_r6","NgxDcDropdownComponent_ng_template_18_Conditional_4_Template","NgxDcDropdownComponent_ng_template_18_Template","_r3","ɵɵgetCurrentView","onPaneItemClicked","tmp_5_0","$implicit","index","selectedItem","value","isActiveItem","NgxDcDropdownComponent_Conditional_20_Conditional_1_ng_container_1_Template","NgxDcDropdownComponent_Conditional_20_Conditional_1_Template","tmp_6_0","NgxDcDropdownComponent_Conditional_20_ng_container_2_ng_container_1_Template","NgxDcDropdownComponent_Conditional_20_ng_container_2_Template","ɵɵpureFunction2","_c4","item_r7","i_r8","NgxDcDropdownComponent_Conditional_20_Template","rowHeight","minBufferMultiplier","maxBufferMultiplier","NgxDcDropdownComponent_Conditional_21_Conditional_0_ng_container_1_Template","NgxDcDropdownComponent_Conditional_21_Conditional_0_Template","NgxDcDropdownComponent_Conditional_21_For_2_ng_container_0_Template","NgxDcDropdownComponent_Conditional_21_For_2_Template","item_r10","ɵ$index_92_r11","$index","NgxDcDropdownComponent_Conditional_21_Template","filteredData$","NgxDcDropdownHeaderDirective","templateRef","inject","TemplateRef","ViewContainerRef","height","input","alias","selectors","inputs","NgxDcDropdownOptionsHeaderDirective","NgxDcDropdownItemDirective","NgxDcDropdownNoItemsDirective","NgxDcDropdownLoadingDirective","NgxDcDropdownComponent","dropdownId","v4","modalService","NgxDcModalServiceToken","dataSource","required","opened","model","allowClickOutside","allowOptionClick","optionClicked","output","headerClicked","useGlobalLoader","appearance","roundedEdgeSize","focusedItemChange","useInfiniteScrolling","showInfiniteScrollingClass","onClick","event","clickedOnDropdown","target","closest","anyPanel","Array","from","document","querySelectorAll","somePanelIsOpened","length","find","panel","querySelector","set","baseAppearanceName","replace","backgroundColor","borderColor","roundedEdges","destroy$","BehaviorSubject","dropdownHeader","contentChild","dropdownOptionsHeader","dropdownOption","dropdownLoading","noItems","scrollViewport","CdkVirtualScrollViewport","matNavListElement","read","ElementRef","disabled","actualDataLength","ngOnDestroy","next","complete","resetItemSelected","selectedItem","retrievedItem","ngOnInit","loading","pipe","takeUntil","subscribe","showGlobalLoadingBar","itemLoading","scrollToTop","__async","Promise","resolve","setTimeout","scrollToIndex","nativeElement","reset","open","close","onPaneItemClicked","item","handlePaneItemClick","emit","focus","onDropdownClick","ɵcmp","ɵɵdefineComponent","contentQueries","rf","ctx","dirIndex","$event","ɵɵresolveDocument","outputs","decls","vars","consts","template","_r1","ɵɵgetCurrentView","NgxDcDropdownComponent_Conditional_21_Template","tmp_6_0","tmp_7_0","ɵɵpureFunction5","_c1","ɵɵpipeBind1","dependencies","NgTemplateOutlet","MatIcon","MatListItem","MatListSubheaderCssMatStyler","MatNavList","MatProgressBar","NgClass","CdkFixedSizeVirtualScroll","CdkVirtualForOf","MatRipple","AsyncPipe","NgxDcFilledCountPipe","styles","encapsulation","INFINITE_DEFAULT_MAX_TOTAL_COUNT","INFINITE_DEFAULT_PAGE_SIZE","NgxDcDropdownDataSource","NgxDcDataSource","rowHeight","minBufferMultiplier","maxBufferMultiplier","isItemDisabled","retrieveItem","force","value","isActiveItem","result","refreshRetrievedItem","ngClassTriggerItem","ngClassBottomHeader","ngClassDropdownItem","currentItem","index","localUpdateRetrievedDataItem","updates","matchesId","isArray","forEach","lineItem","key","Object","keys","localUpdateSelectedDataItem","fullLocalUpdateDataItem","selectedUpdates","selectedMatchesId","retrievedUpdates","retrievedMatchesId","localUpdateDataItem","NgxDcDropdownApiDataSource","httpClient","params","constructor","getParams","getCount","response","xTotalCount","headers","get","parseInt","getResults","body","retrieveDataItems","overrideParams","firstValueFrom","relativePath","observe","count","results","NgxDcInfiniteDropdownDataSource","maxTotalCount","pageSize","fetchedPages","Set","cachedData","subscription","lastPageAccessed","prepareInfiniteScroller","data$","initializeFiltering","originalInitialize","__superGet","_NgxDcInfiniteDropdownDataSource","initialize","originalRefresh","refresh","resetInfiniteScrolling","add","count$","initialized","clearAllItemsExceptCurrentPage","startIndex","endIndex","map","i","clear","pagedData","fetchPageData","fetchPage","connect","collectionViewer","viewChange","range","startPage","getPageForIndex","start","endPage","end","pagesFetched","all","_","page","filteredData$","has","isFirstTime","retrieveFinalData","__spreadProps","__spreadValues","offset","limit","includeCount","serverPagedData","concat","slice","filter","a","splice","disconnect","unsubscribe","Math","floor","NgxDcDropdownModule","CommonModule","NgxDcDropdownComponent"],"x_google_ignoreList":[0,1,2,3,4]}