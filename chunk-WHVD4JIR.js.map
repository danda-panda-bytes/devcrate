{"version":3,"sources":["node_modules/@angular/cdk/fesm2022/text-field.mjs","node_modules/@angular/material/fesm2022/input.mjs","projects/devcrate/ngx-dc-side-pane-list/src/lib/directives/pane-content.directive.ts","projects/devcrate/ngx-dc-side-pane-list/src/lib/directives/pane-page-info.directive.ts","projects/devcrate/ngx-dc-side-pane-list/src/lib/directives/side-pane-item.directive.ts","projects/devcrate/ngx-dc-side-pane-list/src/lib/side-pane-list.component.ts","projects/devcrate/ngx-dc-side-pane-list/src/lib/side-pane-list.component.html","projects/devcrate/ngx-dc-side-pane-list/src/lib/side-pane-list.data-source.ts","projects/devcrate/ngx-dc-side-pane-list/src/lib/side-pane-list.module.ts","projects/devcrate/ngx-dc-side-pane-list/src/public-api.ts","projects/devcrate/ngx-dc-side-pane-list/src/devcrate-ngx-dc-side-pane-list.ts","src/app/pages/side-pane-list-demo/basic-side-pane-list/basic-side-pane-list.data-source.ts","src/app/pages/side-pane-list-demo/basic-side-pane-list/basic-side-pane-list.component.ts","src/app/pages/side-pane-list-demo/basic-side-pane-list/basic-side-pane-list.component.html","src/app/pages/side-pane-list-demo/infinite-scroll-side-pane-list/infinite-scroll-side-pane-list.data-source.ts","src/app/pages/side-pane-list-demo/infinite-scroll-side-pane-list/infinite-scroll-side-pane-list.component.ts","src/app/pages/side-pane-list-demo/infinite-scroll-side-pane-list/infinite-scroll-side-pane-list.component.html","src/app/pages/side-pane-list-demo/sortable-infinite-scroll-side-pane-list/sortable-infinite-scroll-side-pane-list.data-source.ts","src/app/pages/side-pane-list-demo/sortable-infinite-scroll-side-pane-list/sortable-infinite-scroll-side-pane-list.component.ts","src/app/pages/side-pane-list-demo/sortable-infinite-scroll-side-pane-list/sortable-infinite-scroll-side-pane-list.component.html","src/app/pages/side-pane-list-demo/side-pane-list-demo.component.ts","src/app/pages/side-pane-list-demo/side-pane-list-demo.component.html"],"sourcesContent":["import { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, ViewEncapsulation, inject, NgZone, Injectable, ElementRef, EventEmitter, Directive, Output, Renderer2, booleanAttribute, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject } from 'rxjs';\nimport { DOCUMENT } from '@angular/common';\nimport { auditTime } from 'rxjs/operators';\n\n/** Component used to load the structural styles of the text field. */\nlet _CdkTextFieldStyleLoader = /*#__PURE__*/(() => {\n  class _CdkTextFieldStyleLoader {\n    static ɵfac = function _CdkTextFieldStyleLoader_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || _CdkTextFieldStyleLoader)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: _CdkTextFieldStyleLoader,\n      selectors: [[\"ng-component\"]],\n      hostAttrs: [\"cdk-text-field-style-loader\", \"\"],\n      decls: 0,\n      vars: 0,\n      template: function _CdkTextFieldStyleLoader_Template(rf, ctx) {},\n      styles: [\"textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{padding:2px 0 !important;box-sizing:content-box !important;height:auto !important;overflow:hidden !important}textarea.cdk-textarea-autosize-measuring-firefox{padding:2px 0 !important;box-sizing:content-box !important;height:0 !important}@keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{animation:cdk-text-field-autofill-start 0s 1ms}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){animation:cdk-text-field-autofill-end 0s 1ms}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return _CdkTextFieldStyleLoader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = /*#__PURE__*/normalizePassiveListenerOptions({\n  passive: true\n});\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nlet AutofillMonitor = /*#__PURE__*/(() => {\n  class AutofillMonitor {\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _monitoredElements = new Map();\n    constructor() {}\n    monitor(elementOrRef) {\n      if (!this._platform.isBrowser) {\n        return EMPTY;\n      }\n      this._styleLoader.load(_CdkTextFieldStyleLoader);\n      const element = coerceElement(elementOrRef);\n      const info = this._monitoredElements.get(element);\n      if (info) {\n        return info.subject;\n      }\n      const result = new Subject();\n      const cssClass = 'cdk-text-field-autofilled';\n      const listener = event => {\n        // Animation events fire on initial element render, we check for the presence of the autofill\n        // CSS class to make sure this is a real change in state, not just the initial render before\n        // we fire off events.\n        if (event.animationName === 'cdk-text-field-autofill-start' && !element.classList.contains(cssClass)) {\n          element.classList.add(cssClass);\n          this._ngZone.run(() => result.next({\n            target: event.target,\n            isAutofilled: true\n          }));\n        } else if (event.animationName === 'cdk-text-field-autofill-end' && element.classList.contains(cssClass)) {\n          element.classList.remove(cssClass);\n          this._ngZone.run(() => result.next({\n            target: event.target,\n            isAutofilled: false\n          }));\n        }\n      };\n      this._ngZone.runOutsideAngular(() => {\n        element.addEventListener('animationstart', listener, listenerOptions);\n        element.classList.add('cdk-text-field-autofill-monitored');\n      });\n      this._monitoredElements.set(element, {\n        subject: result,\n        unlisten: () => {\n          element.removeEventListener('animationstart', listener, listenerOptions);\n        }\n      });\n      return result;\n    }\n    stopMonitoring(elementOrRef) {\n      const element = coerceElement(elementOrRef);\n      const info = this._monitoredElements.get(element);\n      if (info) {\n        info.unlisten();\n        info.subject.complete();\n        element.classList.remove('cdk-text-field-autofill-monitored');\n        element.classList.remove('cdk-text-field-autofilled');\n        this._monitoredElements.delete(element);\n      }\n    }\n    ngOnDestroy() {\n      this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static ɵfac = function AutofillMonitor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AutofillMonitor)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: AutofillMonitor,\n      factory: AutofillMonitor.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AutofillMonitor;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** A directive that can be used to monitor the autofill state of an input. */\nlet CdkAutofill = /*#__PURE__*/(() => {\n  class CdkAutofill {\n    _elementRef = inject(ElementRef);\n    _autofillMonitor = inject(AutofillMonitor);\n    /** Emits when the autofill state of the element changes. */\n    cdkAutofill = new EventEmitter();\n    constructor() {}\n    ngOnInit() {\n      this._autofillMonitor.monitor(this._elementRef).subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n      this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static ɵfac = function CdkAutofill_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkAutofill)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkAutofill,\n      selectors: [[\"\", \"cdkAutofill\", \"\"]],\n      outputs: {\n        cdkAutofill: \"cdkAutofill\"\n      }\n    });\n  }\n  return CdkAutofill;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Directive to automatically resize a textarea to fit its content. */\nlet CdkTextareaAutosize = /*#__PURE__*/(() => {\n  class CdkTextareaAutosize {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    _ngZone = inject(NgZone);\n    _renderer = inject(Renderer2);\n    _resizeEvents = new Subject();\n    /** Keep track of the previous textarea value to avoid resizing when the value hasn't changed. */\n    _previousValue;\n    _initialHeight;\n    _destroyed = new Subject();\n    _listenerCleanups;\n    _minRows;\n    _maxRows;\n    _enabled = true;\n    /**\n     * Value of minRows as of last resize. If the minRows has decreased, the\n     * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n     * does not have the same problem because it does not affect the textarea's scrollHeight.\n     */\n    _previousMinRows = -1;\n    _textareaElement;\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n      return this._minRows;\n    }\n    set minRows(value) {\n      this._minRows = coerceNumberProperty(value);\n      this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n      return this._maxRows;\n    }\n    set maxRows(value) {\n      this._maxRows = coerceNumberProperty(value);\n      this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n      return this._enabled;\n    }\n    set enabled(value) {\n      // Only act if the actual value changed. This specifically helps to not run\n      // resizeToFitContent too early (i.e. before ngAfterViewInit)\n      if (this._enabled !== value) {\n        (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n      }\n    }\n    get placeholder() {\n      return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n      this._cachedPlaceholderHeight = undefined;\n      if (value) {\n        this._textareaElement.setAttribute('placeholder', value);\n      } else {\n        this._textareaElement.removeAttribute('placeholder');\n      }\n      this._cacheTextareaPlaceholderHeight();\n    }\n    /** Cached height of a textarea with a single row. */\n    _cachedLineHeight;\n    /** Cached height of a textarea with only the placeholder. */\n    _cachedPlaceholderHeight;\n    /** Used to reference correct document/window */\n    _document = inject(DOCUMENT, {\n      optional: true\n    });\n    _hasFocus;\n    _isViewInited = false;\n    constructor() {\n      const styleLoader = inject(_CdkPrivateStyleLoader);\n      styleLoader.load(_CdkTextFieldStyleLoader);\n      this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n      const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n      if (minHeight) {\n        this._textareaElement.style.minHeight = minHeight;\n      }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n      const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n      if (maxHeight) {\n        this._textareaElement.style.maxHeight = maxHeight;\n      }\n    }\n    ngAfterViewInit() {\n      if (this._platform.isBrowser) {\n        // Remember the height which we started with in case autosizing is disabled\n        this._initialHeight = this._textareaElement.style.height;\n        this.resizeToFitContent();\n        this._ngZone.runOutsideAngular(() => {\n          this._listenerCleanups = [this._renderer.listen('window', 'resize', () => this._resizeEvents.next()), this._renderer.listen(this._textareaElement, 'focus', this._handleFocusEvent), this._renderer.listen(this._textareaElement, 'blur', this._handleFocusEvent)];\n          this._resizeEvents.pipe(auditTime(16)).subscribe(() => {\n            // Clear the cached heights since the styles can change\n            // when the window is resized (e.g. by media queries).\n            this._cachedLineHeight = this._cachedPlaceholderHeight = undefined;\n            this.resizeToFitContent(true);\n          });\n        });\n        this._isViewInited = true;\n        this.resizeToFitContent(true);\n      }\n    }\n    ngOnDestroy() {\n      this._listenerCleanups?.forEach(cleanup => cleanup());\n      this._resizeEvents.complete();\n      this._destroyed.next();\n      this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n      if (this._cachedLineHeight) {\n        return;\n      }\n      // Use a clone element because we have to override some styles.\n      let textareaClone = this._textareaElement.cloneNode(false);\n      textareaClone.rows = 1;\n      // Use `position: absolute` so that this doesn't cause a browser layout and use\n      // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n      // would affect the height.\n      textareaClone.style.position = 'absolute';\n      textareaClone.style.visibility = 'hidden';\n      textareaClone.style.border = 'none';\n      textareaClone.style.padding = '0';\n      textareaClone.style.height = '';\n      textareaClone.style.minHeight = '';\n      textareaClone.style.maxHeight = '';\n      // In Firefox it happens that textarea elements are always bigger than the specified amount\n      // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n      // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n      // to hidden. This ensures that there is no invalid calculation of the line height.\n      // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n      textareaClone.style.overflow = 'hidden';\n      this._textareaElement.parentNode.appendChild(textareaClone);\n      this._cachedLineHeight = textareaClone.clientHeight;\n      textareaClone.remove();\n      // Min and max heights have to be re-calculated if the cached line height changes\n      this._setMinHeight();\n      this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n      const element = this._textareaElement;\n      const previousMargin = element.style.marginBottom || '';\n      const isFirefox = this._platform.FIREFOX;\n      const needsMarginFiller = isFirefox && this._hasFocus;\n      const measuringClass = isFirefox ? 'cdk-textarea-autosize-measuring-firefox' : 'cdk-textarea-autosize-measuring';\n      // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n      // work around it by assigning a temporary margin with the same height as the `textarea` so that\n      // it occupies the same amount of space. See #23233.\n      if (needsMarginFiller) {\n        element.style.marginBottom = `${element.clientHeight}px`;\n      }\n      // Reset the textarea height to auto in order to shrink back to its default size.\n      // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n      element.classList.add(measuringClass);\n      // The measuring class includes a 2px padding to workaround an issue with Chrome,\n      // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n      const scrollHeight = element.scrollHeight - 4;\n      element.classList.remove(measuringClass);\n      if (needsMarginFiller) {\n        element.style.marginBottom = previousMargin;\n      }\n      return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n      if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n        return;\n      }\n      if (!this.placeholder) {\n        this._cachedPlaceholderHeight = 0;\n        return;\n      }\n      const value = this._textareaElement.value;\n      this._textareaElement.value = this._textareaElement.placeholder;\n      this._cachedPlaceholderHeight = this._measureScrollHeight();\n      this._textareaElement.value = value;\n    }\n    /** Handles `focus` and `blur` events. */\n    _handleFocusEvent = event => {\n      this._hasFocus = event.type === 'focus';\n    };\n    ngDoCheck() {\n      if (this._platform.isBrowser) {\n        this.resizeToFitContent();\n      }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n      // If autosizing is disabled, just skip everything else\n      if (!this._enabled) {\n        return;\n      }\n      this._cacheTextareaLineHeight();\n      this._cacheTextareaPlaceholderHeight();\n      // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n      // in checking the height of the textarea.\n      if (!this._cachedLineHeight) {\n        return;\n      }\n      const textarea = this._elementRef.nativeElement;\n      const value = textarea.value;\n      // Only resize if the value or minRows have changed since these calculations can be expensive.\n      if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n        return;\n      }\n      const scrollHeight = this._measureScrollHeight();\n      const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n      // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n      textarea.style.height = `${height}px`;\n      this._ngZone.runOutsideAngular(() => {\n        if (typeof requestAnimationFrame !== 'undefined') {\n          requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n        } else {\n          setTimeout(() => this._scrollToCaretPosition(textarea));\n        }\n      });\n      this._previousValue = value;\n      this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n      // Do not try to change the textarea, if the initialHeight has not been determined yet\n      // This might potentially remove styles when reset() is called before ngAfterViewInit\n      if (this._initialHeight !== undefined) {\n        this._textareaElement.style.height = this._initialHeight;\n      }\n    }\n    _noopInputHandler() {\n      // no-op handler that ensures we're running change detection on input events.\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n      const {\n        selectionStart,\n        selectionEnd\n      } = textarea;\n      // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n      // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n      // between the time we requested the animation frame and when it was executed.\n      // Also note that we have to assert that the textarea is focused before we set the\n      // selection range. Setting the selection range on a non-focused textarea will cause\n      // it to receive focus on IE and Edge.\n      if (!this._destroyed.isStopped && this._hasFocus) {\n        textarea.setSelectionRange(selectionStart, selectionEnd);\n      }\n    }\n    static ɵfac = function CdkTextareaAutosize_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || CdkTextareaAutosize)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: CdkTextareaAutosize,\n      selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]],\n      hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"],\n      hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() {\n            return ctx._noopInputHandler();\n          });\n        }\n      },\n      inputs: {\n        minRows: [0, \"cdkAutosizeMinRows\", \"minRows\"],\n        maxRows: [0, \"cdkAutosizeMaxRows\", \"maxRows\"],\n        enabled: [2, \"cdkTextareaAutosize\", \"enabled\", booleanAttribute],\n        placeholder: \"placeholder\"\n      },\n      exportAs: [\"cdkTextareaAutosize\"],\n      features: [i0.ɵɵInputTransformsFeature]\n    });\n  }\n  return CdkTextareaAutosize;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet TextFieldModule = /*#__PURE__*/(() => {\n  class TextFieldModule {\n    static ɵfac = function TextFieldModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || TextFieldModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: TextFieldModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return TextFieldModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Platform, getSupportedInputTypes } from '@angular/cdk/platform';\nimport { AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, NgZone, Renderer2, isSignal, effect, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { ErrorStateMatcher, _ErrorStateTracker, MatCommonModule } from '@angular/material/core';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = /*#__PURE__*/new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\n/** Injection token that can be used to provide the default options for the input. */\nconst MAT_INPUT_CONFIG = /*#__PURE__*/new InjectionToken('MAT_INPUT_CONFIG');\nlet MatInput = /*#__PURE__*/(() => {\n  class MatInput {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    ngControl = inject(NgControl, {\n      optional: true,\n      self: true\n    });\n    _autofillMonitor = inject(AutofillMonitor);\n    _ngZone = inject(NgZone);\n    _formField = inject(MAT_FORM_FIELD, {\n      optional: true\n    });\n    _renderer = inject(Renderer2);\n    _uid = inject(_IdGenerator).getId('mat-input-');\n    _previousNativeValue;\n    _inputValueAccessor;\n    _signalBasedValueAccessor;\n    _previousPlaceholder;\n    _errorStateTracker;\n    _config = inject(MAT_INPUT_CONFIG, {\n      optional: true\n    });\n    _cleanupIosKeyup;\n    _cleanupWebkitWheel;\n    /** `aria-describedby` IDs assigned by the form field. */\n    _formFieldDescribedBy;\n    /** Whether the component is being rendered on the server. */\n    _isServer;\n    /** Whether the component is a native html select. */\n    _isNativeSelect;\n    /** Whether the component is a textarea. */\n    _isTextarea;\n    /** Whether the input is inside of a form field. */\n    _isInFormField;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    autofilled = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n      return this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = coerceBooleanProperty(value);\n      // Browsers may not fire the blur event if the input is disabled too quickly.\n      // Reset from here to ensure that the element doesn't become stuck.\n      if (this.focused) {\n        this.focused = false;\n        this.stateChanges.next();\n      }\n    }\n    _disabled = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n      return this._id;\n    }\n    set id(value) {\n      this._id = value || this._uid;\n    }\n    _id;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder;\n    /**\n     * Name of the input.\n     * @docs-private\n     */\n    name;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n      return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n      this._required = coerceBooleanProperty(value);\n    }\n    _required;\n    /** Input type of the element. */\n    get type() {\n      return this._type;\n    }\n    set type(value) {\n      const prevType = this._type;\n      this._type = value || 'text';\n      this._validateType();\n      // When using Angular inputs, developers are no longer able to set the properties on the native\n      // input element. To ensure that bindings for `type` work, we need to sync the setter\n      // with the native property. Textarea elements don't support the type property or attribute.\n      if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n        this._elementRef.nativeElement.type = this._type;\n      }\n      if (this._type !== prevType) {\n        this._ensureWheelDefaultBehavior();\n      }\n    }\n    _type = 'text';\n    /** An object used to control when error messages are shown. */\n    get errorStateMatcher() {\n      return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n      this._errorStateTracker.matcher = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n      return this._signalBasedValueAccessor ? this._signalBasedValueAccessor.value() : this._inputValueAccessor.value;\n    }\n    set value(value) {\n      if (value !== this.value) {\n        if (this._signalBasedValueAccessor) {\n          this._signalBasedValueAccessor.value.set(value);\n        } else {\n          this._inputValueAccessor.value = value;\n        }\n        this.stateChanges.next();\n      }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n      return this._readonly;\n    }\n    set readonly(value) {\n      this._readonly = coerceBooleanProperty(value);\n    }\n    _readonly = false;\n    /** Whether the input should remain interactive when it is disabled. */\n    disabledInteractive;\n    /** Whether the input is in an error state. */\n    get errorState() {\n      return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n      this._errorStateTracker.errorState = value;\n    }\n    _neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(t => getSupportedInputTypes().has(t));\n    constructor() {\n      const parentForm = inject(NgForm, {\n        optional: true\n      });\n      const parentFormGroup = inject(FormGroupDirective, {\n        optional: true\n      });\n      const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n      const accessor = inject(MAT_INPUT_VALUE_ACCESSOR, {\n        optional: true,\n        self: true\n      });\n      const element = this._elementRef.nativeElement;\n      const nodeName = element.nodeName.toLowerCase();\n      if (accessor) {\n        if (isSignal(accessor.value)) {\n          this._signalBasedValueAccessor = accessor;\n        } else {\n          this._inputValueAccessor = accessor;\n        }\n      } else {\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = element;\n      }\n      this._previousNativeValue = this.value;\n      // Force setter to be called in case id was not specified.\n      this.id = this.id;\n      // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n      // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n      // exists on iOS, we only bother to install the listener on iOS.\n      if (this._platform.IOS) {\n        this._ngZone.runOutsideAngular(() => {\n          this._cleanupIosKeyup = this._renderer.listen(element, 'keyup', this._iOSKeyupListener);\n        });\n      }\n      this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n      this._isServer = !this._platform.isBrowser;\n      this._isNativeSelect = nodeName === 'select';\n      this._isTextarea = nodeName === 'textarea';\n      this._isInFormField = !!this._formField;\n      this.disabledInteractive = this._config?.disabledInteractive || false;\n      if (this._isNativeSelect) {\n        this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n      }\n      if (this._signalBasedValueAccessor) {\n        effect(() => {\n          // Read the value so the effect can register the dependency.\n          this._signalBasedValueAccessor.value();\n          this.stateChanges.next();\n        });\n      }\n    }\n    ngAfterViewInit() {\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n          this.autofilled = event.isAutofilled;\n          this.stateChanges.next();\n        });\n      }\n    }\n    ngOnChanges() {\n      this.stateChanges.next();\n    }\n    ngOnDestroy() {\n      this.stateChanges.complete();\n      if (this._platform.isBrowser) {\n        this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n      }\n      this._cleanupIosKeyup?.();\n      this._cleanupWebkitWheel?.();\n    }\n    ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n        // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n        // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n        // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n        // disabled.\n        if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n          this.disabled = this.ngControl.disabled;\n          this.stateChanges.next();\n        }\n      }\n      // We need to dirty-check the native element's value, because there are some cases where\n      // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n      // updating the value using `emitEvent: false`).\n      this._dirtyCheckNativeValue();\n      // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n      // present or not depends on a query which is prone to \"changed after checked\" errors.\n      this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n      this._elementRef.nativeElement.focus(options);\n    }\n    /** Refreshes the error state of the input. */\n    updateErrorState() {\n      this._errorStateTracker.updateErrorState();\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n      if (isFocused === this.focused) {\n        return;\n      }\n      if (!this._isNativeSelect && isFocused && this.disabled && this.disabledInteractive) {\n        const element = this._elementRef.nativeElement;\n        // Focusing an input that has text will cause all the text to be selected. Clear it since\n        // the user won't be able to change it. This is based on the internal implementation.\n        if (element.type === 'number') {\n          // setSelectionRange doesn't work on number inputs so it needs to be set briefly to text.\n          element.type = 'text';\n          element.setSelectionRange(0, 0);\n          element.type = 'number';\n        } else {\n          element.setSelectionRange(0, 0);\n        }\n      }\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n    _onInput() {\n      // This is a noop function and is used to let Angular know whenever the value changes.\n      // Angular will run a new change detection each time the `input` event has been dispatched.\n      // It's necessary that Angular recognizes the value change, because when floatingLabel\n      // is set to false and Angular forms aren't used, the placeholder won't recognize the\n      // value changes and will not disappear.\n      // Listening to the input event wouldn't be necessary when the input is using the\n      // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n      const newValue = this._elementRef.nativeElement.value;\n      if (this._previousNativeValue !== newValue) {\n        this._previousNativeValue = newValue;\n        this.stateChanges.next();\n      }\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n      const placeholder = this._getPlaceholder();\n      if (placeholder !== this._previousPlaceholder) {\n        const element = this._elementRef.nativeElement;\n        this._previousPlaceholder = placeholder;\n        placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n      }\n    }\n    /** Gets the current placeholder of the form field. */\n    _getPlaceholder() {\n      return this.placeholder || null;\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n      if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatInputUnsupportedTypeError(this._type);\n      }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n      return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n      // The `validity` property won't be present on platform-server.\n      let validity = this._elementRef.nativeElement.validity;\n      return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n      return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n      if (this._isNativeSelect) {\n        // For a single-selection `<select>`, the label should float when the selected option has\n        // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n        // overlapping the label with the options.\n        const selectElement = this._elementRef.nativeElement;\n        const firstOption = selectElement.options[0];\n        // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n        // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n        return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n      } else {\n        return this.focused && !this.disabled || !this.empty;\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n      const element = this._elementRef.nativeElement;\n      const existingDescribedBy = element.getAttribute('aria-describedby');\n      let toAssign;\n      // In some cases there might be some `aria-describedby` IDs that were assigned directly,\n      // like by the `AriaDescriber` (see #30011). Attempt to preserve them by taking the previous\n      // attribute value and filtering out the IDs that came from the previous `setDescribedByIds`\n      // call. Note the `|| ids` here allows us to avoid duplicating IDs on the first render.\n      if (existingDescribedBy) {\n        const exclude = this._formFieldDescribedBy || ids;\n        toAssign = ids.concat(existingDescribedBy.split(' ').filter(id => id && !exclude.includes(id)));\n      } else {\n        toAssign = ids;\n      }\n      this._formFieldDescribedBy = ids;\n      if (toAssign.length) {\n        element.setAttribute('aria-describedby', toAssign.join(' '));\n      } else {\n        element.removeAttribute('aria-describedby');\n      }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n      // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n      // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n      // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n      if (!this.focused) {\n        this.focus();\n      }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n      const element = this._elementRef.nativeElement;\n      return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n    _iOSKeyupListener = event => {\n      const el = event.target;\n      // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n      // indicate different things. If the value is 0, it means that the caret is at the start\n      // of the input, whereas a value of `null` means that the input doesn't support\n      // manipulating the selection range. Inputs that don't support setting the selection range\n      // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n      // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n      if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n        // `1, 1` fixes it for the first time that you type text and\n        // then hold delete. Toggling to `1, 1` and then back to\n        // `0, 0` seems to completely fix it.\n        el.setSelectionRange(1, 1);\n        el.setSelectionRange(0, 0);\n      }\n    };\n    _webkitBlinkWheelListener = () => {\n      // This is a noop function and is used to enable mouse wheel input\n      // on number inputs\n      // on blink and webkit browsers.\n    };\n    /**\n     * In blink and webkit browsers a focused number input does not increment or decrement its value\n     * on mouse wheel interaction unless a wheel event listener is attached to it or one of its\n     * ancestors or a passive wheel listener is attached somewhere in the DOM. For example: Hitting\n     * a tooltip once enables the mouse wheel input for all number inputs as long as it exists. In\n     * order to get reliable and intuitive behavior we apply a wheel event on our own thus making\n     * sure increment and decrement by mouse wheel works every time.\n     * @docs-private\n     */\n    _ensureWheelDefaultBehavior() {\n      this._cleanupWebkitWheel?.();\n      if (this._type === 'number' && (this._platform.BLINK || this._platform.WEBKIT)) {\n        this._cleanupWebkitWheel = this._renderer.listen(this._elementRef.nativeElement, 'wheel', this._webkitBlinkWheelListener);\n      }\n    }\n    /** Gets the value to set on the `readonly` attribute. */\n    _getReadonlyAttribute() {\n      if (this._isNativeSelect) {\n        return null;\n      }\n      if (this.readonly || this.disabled && this.disabledInteractive) {\n        return 'true';\n      }\n      return null;\n    }\n    static ɵfac = function MatInput_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatInput)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatInput,\n      selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-input-element\"],\n      hostVars: 21,\n      hostBindings: function MatInput_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n            return ctx._focusChanged(true);\n          })(\"blur\", function MatInput_blur_HostBindingHandler() {\n            return ctx._focusChanged(false);\n          })(\"input\", function MatInput_input_HostBindingHandler() {\n            return ctx._onInput();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵhostProperty(\"id\", ctx.id)(\"disabled\", ctx.disabled && !ctx.disabledInteractive)(\"required\", ctx.required);\n          i0.ɵɵattribute(\"name\", ctx.name || null)(\"readonly\", ctx._getReadonlyAttribute())(\"aria-disabled\", ctx.disabled && ctx.disabledInteractive ? \"true\" : null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required)(\"id\", ctx.id);\n          i0.ɵɵclassProp(\"mat-input-server\", ctx._isServer)(\"mat-mdc-form-field-textarea-control\", ctx._isInFormField && ctx._isTextarea)(\"mat-mdc-form-field-input-control\", ctx._isInFormField)(\"mat-mdc-input-disabled-interactive\", ctx.disabledInteractive)(\"mdc-text-field__input\", ctx._isInFormField)(\"mat-mdc-native-select-inline\", ctx._isInlineSelect());\n        }\n      },\n      inputs: {\n        disabled: \"disabled\",\n        id: \"id\",\n        placeholder: \"placeholder\",\n        name: \"name\",\n        required: \"required\",\n        type: \"type\",\n        errorStateMatcher: \"errorStateMatcher\",\n        userAriaDescribedBy: [0, \"aria-describedby\", \"userAriaDescribedBy\"],\n        value: \"value\",\n        readonly: \"readonly\",\n        disabledInteractive: [2, \"disabledInteractive\", \"disabledInteractive\", booleanAttribute]\n      },\n      exportAs: [\"matInput\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MatFormFieldControl,\n        useExisting: MatInput\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return MatInput;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatInputModule = /*#__PURE__*/(() => {\n  class MatInputModule {\n    static ɵfac = function MatInputModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatInputModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatInputModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule]\n    });\n  }\n  return MatInputModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_CONFIG, MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n","import { Directive, TemplateRef, ViewContainerRef, inject } from '@angular/core';\n\n@Directive({\n  selector: '[ngxDcPaneContent]',\n  standalone: true\n})\nexport class NgxDcPaneContentDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n  ViewContainerRef = inject(ViewContainerRef);\n\n\n}\n","import { Directive, TemplateRef, ViewContainerRef, inject } from '@angular/core';\n\n@Directive({\n  selector: '[ngxDcPanePageInfo]',\n  standalone: true\n})\nexport class NgxDcPanePageInfoDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n  ViewContainerRef = inject(ViewContainerRef);\n}\n","import { Directive, TemplateRef, ViewContainerRef, inject } from '@angular/core';\n\n@Directive({\n  selector: '[ngxDcSidePaneItemLineNumber]',\n  standalone: true\n})\nexport class NgxDcSidePaneItemLineNumberDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n  viewContainerRef = inject(ViewContainerRef);\n\n}\n\n@Directive({\n  selector: '[ngxDcSidePaneItem]',\n  standalone: true\n})\nexport class NgxDcSidePaneItemDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n  viewContainerRef = inject(ViewContainerRef);\n\n}\n\n@Directive({\n  selector: '[ngxDcSidePaneFooter]',\n  standalone: true\n})\nexport class NgxDcSidePaneFooterDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n  viewContainerRef = inject(ViewContainerRef);\n\n}\n\n@Directive({\n  selector: '[ngxDcSidePaneLoadingItem]',\n  standalone: true\n})\nexport class NgxDcSidePaneLoadingItemDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n  viewContainerRef = inject(ViewContainerRef);\n\n}\n\n@Directive({\n  selector: '[ngxDcSidePaneItemSubtitle]',\n  standalone: true\n})\nexport class NgxDcSidePaneItemSubtitleDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n  viewContainerRef = inject(ViewContainerRef);\n\n}\n\n@Directive({\n  selector: '[ngxDcSidePaneItemText]',\n  standalone: true\n})\nexport class NgxDcSidePaneItemTextDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n  viewContainerRef = inject(ViewContainerRef);\n\n}\n\n@Directive({\n  selector: '[ngxDcSidePaneItemRightText]',\n  standalone: true\n})\nexport class NgxDcSidePaneItemRightTextDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n  viewContainerRef = inject(ViewContainerRef);\n\n}\n\n@Directive({\n  selector: '[ngxDcSidePaneItemIcon]',\n  standalone: true\n})\nexport class NgxDcSidePaneItemIconDirective {\n  templateRef = inject<TemplateRef<any>>(TemplateRef);\n  viewContainerRef = inject(ViewContainerRef);\n\n}\n","import { ScrollingModule } from \"@angular/cdk/scrolling\";\nimport { CommonModule } from \"@angular/common\";\nimport { Component, ElementRef, ViewEncapsulation, inject, input, contentChild, viewChild, viewChildren, model } from '@angular/core';\nimport { FormsModule } from \"@angular/forms\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatInputModule } from \"@angular/material/input\";\nimport { MatListItem, MatListModule } from \"@angular/material/list\";\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { NgxDcFilledCountPipe, NgxDcModalService, NgxDcModalServiceToken } from \"@devcrate/ngx-dc-utils\";\nimport { BehaviorSubject, skip } from \"rxjs\";\nimport { NgxDcPaneContentDirective } from \"./directives/pane-content.directive\";\nimport { NgxDcPanePageInfoDirective } from \"./directives/pane-page-info.directive\";\nimport {\n  NgxDcSidePaneFooterDirective,\n  NgxDcSidePaneItemDirective,\n  NgxDcSidePaneItemIconDirective, NgxDcSidePaneItemLineNumberDirective,\n  NgxDcSidePaneItemRightTextDirective,\n  NgxDcSidePaneItemSubtitleDirective,\n  NgxDcSidePaneItemTextDirective,\n  NgxDcSidePaneLoadingItemDirective\n} from \"./directives/side-pane-item.directive\";\nimport { NgxDcInfiniteSidePaneListDataSource, NgxDcSidePaneListApiDataSource } from \"./side-pane-list.data-source\";\n\n/**\n * Just like a mat-table, but instead of a table for the entire area, it has a left pane and a right side content.\n * The left pane will display the list of items and the right pane will show the details for the selected item.\n * You can filter, and page items.\n *\n * General Usage:\n * ```html\n * <ngx-dc-side-pane-list [dataSource]=\"dataSource\">\n *   <ng-container *ngxDcPanePageInfo=\"let selectedItem; let totalCount = totalCount; let collapsed = collapsed\">\n *     Top area of the left pane so you can have a filter, display page info, etc.\n *   </ng-container>\n *   <ng-container *ngxDcSidePaneItem=\"let item; let index = index\">\n *     Left Pane Item\n *   </ng-container>\n *   <ng-container *ngxDcPaneContent=\"let currentItem\">\n *       Right Pane Content\n *   </ng-container>\n * </ngx-dc-side-pane-list>\n * ```\n */\n@Component({\n    selector: 'ngx-dc-side-pane-list',\n    imports: [\n        CommonModule,\n        MatProgressBarModule,\n        MatIconModule,\n        MatListModule,\n        MatButtonModule,\n        MatCardModule,\n        MatTooltipModule,\n        ScrollingModule,\n        NgxDcFilledCountPipe,\n        MatInputModule,\n        FormsModule,\n        MatFormFieldModule,\n    ],\n    templateUrl: './side-pane-list.component.html',\n    styleUrl: './side-pane-list.component.scss',\n    encapsulation: ViewEncapsulation.None\n})\nexport class NgxDcSidePaneListComponent<GetDataItemsT, FinalDataItemsT = GetDataItemsT, RetrievedItemT = GetDataItemsT> {\n  public modalService = inject<NgxDcModalService>(NgxDcModalServiceToken);\n\n  public destroy$ = new BehaviorSubject(false)\n  /**\n   * Whether the left pane is collapsed or not.\n   */\n  public collapsed = model(false);\n  /**\n   * Whether the dao being used is infinite scrolling or not.\n   */\n  public readonly useInfiniteScrolling = input<boolean>(false)\n\n  /** Whether the table will show the global loading bar (defined in the ModalService) or not. */\n  public readonly useGlobalLoader = input<boolean>(true)\n\n  /** When a user clicks on an item, should the global loading bar be shown */\n  public readonly useGlobalOnItem = input<boolean>(true)\n\n  /** Whether the left pane is collapsible or not. */\n  public readonly collapsible = input<boolean>(true);\n\n  /** The dao that will be used to manage the data. */\n  public readonly dataSource = input.required<NgxDcSidePaneListApiDataSource<GetDataItemsT, FinalDataItemsT, RetrievedItemT> | NgxDcInfiniteSidePaneListDataSource<GetDataItemsT, FinalDataItemsT, RetrievedItemT>>();\n\n  readonly sidePaneFooter = contentChild(NgxDcSidePaneFooterDirective);\n\n  readonly sidePaneItemLineNumber = contentChild(NgxDcSidePaneItemLineNumberDirective);\n\n  readonly sidePaneItem = contentChild(NgxDcSidePaneItemDirective);\n\n  readonly sidePaneLoadingItem = contentChild(NgxDcSidePaneLoadingItemDirective);\n\n  readonly sidePaneItemSubtitle = contentChild(NgxDcSidePaneItemSubtitleDirective);\n\n  readonly sidePaneItemText = contentChild(NgxDcSidePaneItemTextDirective);\n\n  readonly sidePaneItemRightText = contentChild(NgxDcSidePaneItemRightTextDirective);\n\n  readonly paneContent = contentChild(NgxDcPaneContentDirective);\n\n  readonly panePageInfo = contentChild(NgxDcPanePageInfoDirective);\n\n  readonly sidePaneItemIcon = contentChild(NgxDcSidePaneItemIconDirective);\n\n  readonly element = viewChild('scroller', { read: ElementRef });\n  readonly matListItems = viewChildren<MatListItem>('matListItem');\n\n  public get firstMatItem(): Element {\n    return this.matListItems()?.at(0)!?._elementRef?.nativeElement?.parentElement?.firstElementChild\n  }\n\n  public scrollToFirstItem() {\n    return this.firstMatItem?.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'start',\n    })\n  }\n\n  public get activeMatItem(): MatListItem | null {\n    return this.matListItems()?.find(item => item?.activated)\n  }\n\n  public scrollToTop() {\n    const element = this.element();\n    if (!element.nativeElement) return\n    element.nativeElement.scrollTop = 0\n  }\n\n  public scrollToActiveItem() {\n    this.activeMatItem?._elementRef.nativeElement.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'start',\n    })\n  }\n\n  public ngOnInit() {\n    // TODO: Add back in, but use a directive instead that will sync up with both\n    // this.navbarService.collapsed$.subscribe(collapsed => {\n    //   if (!this.collapsible) { return }\n    //   if (collapsed) { this.collapsed = collapsed }\n    // })\n\n    if (this.useGlobalLoader()) {\n      this.dataSource().loading.subscribe(loading => {\n        this.modalService.showGlobalLoadingBar?.next(loading)\n      })\n    }\n\n    if (this.useGlobalOnItem()) {\n      this.dataSource().itemLoading.pipe(\n        // Skips the initialized value which is always false\n        skip(1),\n      ).subscribe((loading: boolean) => {\n        this.modalService.showGlobalLoadingBar?.next(loading)\n      })\n    }\n  }\n\n  public ngOnDestroy() {\n    this.destroy$.next(true)\n    this.destroy$.complete()\n  }\n\n  /**\n   * Meant to be used by ViewChild if we want to reset a focused item from a parent component.\n   */\n  public resetFocusedItem() {\n    this.dataSource().selectedItem.next(null)\n    this.dataSource().retrievedItem.next(null)\n  }\n\n  /**\n   * Resets the focused item and resets the data source\n   */\n  public reset() {\n    this.resetFocusedItem()\n    this.dataSource().reset()\n  }\n\n  public async onPaneItemClicked(item: FinalDataItemsT): Promise<void> {\n    await this.dataSource().onPaneItemClicked(item)\n  }\n}\n","<mat-card class=\"ngx-dc-side-pane-list\" [class.collapsed]=\"collapsed()\">\n  <div mat-subheader class=\"dc-total-count\" data-testid=\"ngx-dc-side-pane-list-total-count\">\n      <ng-container\n        *ngTemplateOutlet=\"panePageInfo()?.templateRef; context: {\n            $implicit: dataSource().selectedItem | async,\n            collapsed: collapsed(),\n            filteredCount: (dataSource().filteredData$ | async) | filledCount,\n            currentCount: dataSource().actualDataLength,\n            totalCount: dataSource().count$ | async,\n        }\"\n      ></ng-container>\n  </div>\n  @if (dataSource().allowLocalFilter) {\n    <mat-form-field class=\"filter-input\" data-testid=\"ngx-dc-side-pane-list-filter-form-field\">\n      <input\n        matInput placeholder=\"Filter\"\n        data-testid=\"ngx-dc-side-pane-list-filter-input\"\n        [ngModel]=\"dataSource().filter.value\"\n        (ngModelChange)=\"dataSource().filter.next($event)\"\n      />\n    </mat-form-field>\n  }\n  <mat-nav-list class=\"dc-side-pane-items\" data-testid=\"ngx-dc-side-pane-list-items\" cdkVirtualScrollingElement #scroller>\n    <ng-template let-item let-i=\"index\" #listItem>\n      <mat-list-item\n        class=\"dc-side-pane-item\"\n        data-testid=\"ngx-dc-side-pane-item\"\n        [ngClass]=\"dataSource().ngClassPaneItem(dataSource().selectedItem | async, item, i)\"\n        (click)=\"onPaneItemClicked(item)\"\n        [disabled]=\"!item || dataSource().isItemDisabled(item)\"\n        [activated]=\"dataSource().selectedItem.value && item && dataSource().isActiveItem(dataSource().selectedItem.value, item)\"\n        #matListItem\n      >\n        @if (item) {\n          <ng-container\n            *ngTemplateOutlet=\"sidePaneItem()?.templateRef; context: {\n                  $implicit: item,\n                  index: i,\n                  collapsed: collapsed(),\n                }\"\n          ></ng-container>\n        } @else {\n          <ng-container\n            *ngTemplateOutlet=\"sidePaneLoadingItem()?.templateRef; context: {\n                  index: i,\n                  collapsed: collapsed(),\n                }\"\n          ></ng-container>\n        }\n      </mat-list-item>\n    </ng-template>\n    @if (useInfiniteScrolling()) {\n      <cdk-virtual-scroll-viewport [itemSize]=\"dataSource().rowHeight\" [minBufferPx]=\"dataSource().rowHeight * 5\" [maxBufferPx]=\"dataSource().rowHeight * 10\">\n        <ng-container *cdkVirtualFor=\"let item of dataSource(); let i = index\">\n          <ng-container *ngTemplateOutlet=\"listItem; context: { $implicit: item, index: i }\"></ng-container>\n        </ng-container>\n      </cdk-virtual-scroll-viewport>\n    } @else {\n      @for (item of dataSource().data$ | async; track dataSource().trackItems(item); let i = $index) {\n        <ng-container *ngTemplateOutlet=\"listItem; context: { $implicit: item, index: i }\"></ng-container>\n      }\n    }\n  </mat-nav-list>\n\n\n  @if (sidePaneFooter()) {\n    <ng-container\n      *ngTemplateOutlet=\"sidePaneFooter()?.templateRef; context: {\n            collapsed: collapsed(),\n          }\"\n    ></ng-container>\n  }\n\n  @if (collapsible()) {\n    <button mat-raised-button class=\"dc-pane-controller\" (click)=\"collapsed.set(!collapsed())\">\n      <div class=\"flex\">\n        <span class=\"flex align-items-center\">{{ collapsed() ? 'Expand' : 'Collapse' }}</span>\n        <span class=\"fill\"></span>\n        <mat-icon class=\"double-arrow\">double_arrow</mat-icon>\n      </div>\n    </button>\n  }\n</mat-card>\n<div class=\"dc-content-pane\">\n    <ng-container\n      *ngTemplateOutlet=\"paneContent()?.templateRef; context: {\n        $implicit: dataSource().retrievedItem | async,\n        selectedItem: dataSource().selectedItem | async,\n        collapsed: collapsed()\n      }\"\n    ></ng-container>\n</div>\n","import { CollectionViewer, DataSource } from \"@angular/cdk/collections\";\nimport { HttpClient, HttpResponse } from \"@angular/common/http\";\nimport {\n  NgxDcDataSource, INFINITE_DEFAULT_MAX_TOTAL_COUNT,\n  INFINITE_DEFAULT_PAGE_SIZE, PageableResult\n} from \"@devcrate/ngx-dc-data-sources\";\nimport { BehaviorSubject, firstValueFrom, Observable, Subscription } from \"rxjs\";\n\n/**\n * This is the base class needed to use the `ngx-dc-side-pane-list` component.\n *\n * Extend this class to retrieve the data for the list pane and details pane.\n *\n * ```typescript\n * export class MyDao extends SidePaneListDataSource<MyData> {\n *    constructor(private http: HttpClient) {}\n *    public rowHeight = 48\n *\n *    public async retrieveDataItems(): Promise<PageableResult<MyData>> {\n *      // returns { count: <amt>, results: [ ... ] }\n *      return firstValueFrom(this.http.get<PageableResult<MyData>>('/api/my-data'))\n *    }\n *\n *    public trackItems(item: MyData) {\n *      return item.id\n *    }\n *\n *    public isActiveItem(selectedItem: MyData, currentItem: MyData) {\n *      return selectedItem.id === currentItem.id\n *    }\n * }\n */\nexport abstract class NgxDcSidePaneListDataSource<\n  GetDataItemsT = any, FinalDataItemsT = GetDataItemsT, RetrievedPaneItemT = GetDataItemsT\n> extends NgxDcDataSource<GetDataItemsT, FinalDataItemsT> {\n  /* rowHeight used for compilation issues so that we have consistent classes */\n  public rowHeight: number = null\n  /** The data given in the details pane */\n  public retrievedItem = new BehaviorSubject<RetrievedPaneItemT>(null)\n\n  /** When a pane item is clicked, this is set to true */\n  public selectedItem = new BehaviorSubject<FinalDataItemsT>(null)\n\n  /** Needed for paging */\n  public pageSize: number = INFINITE_DEFAULT_PAGE_SIZE\n\n  /** Needed for the for loop when iterating over the pane items */\n  public abstract trackItems(item: FinalDataItemsT): any\n\n  /**\n   * Sets the item on the list pane to an active state. The item on the list pane is a mat-list-item. The `activated`\n   * boolean is set to true when this function returns true.\n   *\n   * @param selectedItem The item that is currently selected in the details pane\n   * @param currentItem The item that is currently being iterated over in the list pane\n   */\n  public abstract isActiveItem(selectedItem: FinalDataItemsT, currentItem: FinalDataItemsT): boolean\n\n  /**\n   * When true, the item on the list pane will be disabled.\n   *\n   * @param selectedItem The item that is currently selected in the details pane\n   */\n  public isItemDisabled(selectedItem: FinalDataItemsT): boolean {\n    return false\n  }\n\n  /**\n   * This is the server call to get the data for the details pane. This is an inner\n   * call made in the `onPaneItemClicked` function.\n   *\n   * Override this function to get the data for the `ngxDcPaneContent` let context.\n   *\n   * @param item The item that was clicked on the list pane\n   */\n  public async retrieveItem(item: FinalDataItemsT): Promise<RetrievedPaneItemT> {\n    return item as unknown as RetrievedPaneItemT\n  }\n\n  /**\n   * When a list pane item is clicked, this function is called.\n   * Its purpose is to retrieve the data needed for the details pane\n   *\n   * When you use `ngx-dc-side-pane-list`, and use the `ngxDcSidePaneItem` directive, this function is called when the\n   * parent element of that content is clicked.\n   *\n   * The let context in the `ngxDcPaneContent` directive is the result of this function.\n   *\n   * ```typescript\n   * <ngx-dc-side-pane-list [dao]=\"dao\" ...>\n   *   <ng-container *ngxDcSidePaneItem=\"let item; let index = index\"></ng-container>\n   *   <ng-container *ngxDcPaneContent=\"let currentItem\"></ng-container>\n   * </ngx-dc-side-pane-list>\n   * ```\n   *\n   * This function is generally not overridden, but the `retrieveItem` function is.\n   *\n   * @param item The item that was clicked on the list pane\n   *\n   * @returns The data for the details pane, which is then set to the `retrievedItem` in the dao, and passed into\n   *          the `ngxDcPaneContent` directive.\n   */\n  public async onPaneItemClicked(item: FinalDataItemsT, force = false): Promise<RetrievedPaneItemT> {\n    if (!item) { return null }\n    if (this.isItemDisabled(item)) { return null }\n    if (!force && this.selectedItem.value && this.isActiveItem(this.selectedItem.value, item)) { return null }\n    this.selectedItem.next(item)\n    this.itemLoading.next(true)\n    const result = await this.retrieveItem(item)\n    this.retrievedItem.next(result)\n    this.itemLoading.next(false)\n    return result\n  }\n\n  /**\n   * Refreshes the item retrieved that is selected\n   */\n  public async refreshRetrievedItem(): Promise<RetrievedPaneItemT> {\n    if (!this.selectedItem.value) return null\n    return this.onPaneItemClicked(this.selectedItem.value, true)\n  }\n\n  /**\n   * This is the `[ngClass]` function for the list pane items. It expects what the {NgClass} object.\n   * The key is the class name and the value is a boolean saying to add the class or not.\n   *\n   * @param focusedItem The item that is currently selected in the details pane\n   * @param item The item being iterated over in the list pane\n   * @param index The index of the item in the list pane\n   *\n   * @returns {NgClass} object\n   *\n   * @example\n   *\n   * ```typescript\n   * public ngClassPaneItem(focusedItem: FinalDataItemsT, item: FinalDataItemsT, index: number) {\n   *   return {\n   *     'pending-bg-color': item.status === 'Pending',\n   *     'odd': index % 2 === 0,\n   *   }\n   * }\n   * ```\n   */\n  public ngClassPaneItem(focusedItem: FinalDataItemsT, item: FinalDataItemsT, index: number) {\n    return {}\n  }\n}\n\n/**\n * If you need to get data from the server and use infinite scrolling, then use this class.\n * It can be used for `ngx-dc-side-pane-list` component or a CdkVirtualFor.\n */\nexport abstract class NgxDcInfiniteSidePaneListDataSource<\n  GetDataItemsT = any, FinalDataItemsT = GetDataItemsT, RetrievedPaneItemT = GetDataItemsT, AllowedParamsT = any\n> extends NgxDcSidePaneListDataSource<GetDataItemsT, FinalDataItemsT, RetrievedPaneItemT>\nimplements DataSource<FinalDataItemsT> {\n  /**\n   * This is meant to be used to determine the height of each row in the list pane so infinite\n   * scrolling behaves as it should\n   */\n  public abstract rowHeight: number\n\n  /** Needed to have a set of items added so that when we get the visible data, we only replace that part of the array instead of adding and changing the scroll position */\n  public maxTotalCount: number = INFINITE_DEFAULT_MAX_TOTAL_COUNT\n\n  /** Needed for paging */\n  public pageSize: number = INFINITE_DEFAULT_PAGE_SIZE\n\n  /** The relative path to the endpoint on the server to get the list pane data from */\n  public abstract relativePath: string\n\n  /** The parameters to send to the server as params when making the http GET request using the {relativePath} */\n  public params: Partial<AllowedParamsT> = {} as any\n\n  /** The pages we have queried from the server */\n  private fetchedPages: Set<number> = new Set<number>()\n\n  private cachedData: FinalDataItemsT[]\n  private subscription: Subscription\n\n  /** The current page the user is on (based on the scroll position on the list pane) */\n  private lastPageAccessed: number = null\n\n  protected constructor(protected httpClient: HttpClient) {\n    super()\n    this.prepareInfiniteScroller()\n  }\n\n  /**\n   * This allows you to overrride the default behavior of the infinite scroller to set any params based on the\n   * next page the scroll wants.\n   * @param params\n   */\n  public getParams(params: {[key: string]: any }): {[key: string]: any } {\n    return params\n  }\n\n  /**\n   * This allows you to overrride the default behavior of the infinite scroller to set any params based on the\n   * next page the scroll wants.\n   *\n   * This is called each time you initialize or call refresh in the data source (and potentially other cases).\n   */\n  public getCount(response: HttpResponse<GetDataItemsT[]>): number {\n    const xTotalCount = response.headers.get(\"X-Total-Count\")\n    return xTotalCount === 'null' ? null : parseInt(xTotalCount || \"0\", 10)\n  }\n\n  /**\n   * Allows you to override how you get the data for the data source, once its retrieved from the response.\n   *\n   * This is called each time you initialize or call refresh in the data source (and potentially other cases).\n   *\n   * @param response The response of the GET request made with the relativePath for this data source.\n   *\n   * @returns\n   */\n  public getResults(response: HttpResponse<GetDataItemsT[]>): GetDataItemsT[] {\n    return response.body\n  }\n\n  public async retrieveDataItems(overrideParams: any = null): Promise<PageableResult<GetDataItemsT>> {\n    const response = await firstValueFrom(this.httpClient.get<GetDataItemsT[]>(this.relativePath, {\n      params: this.getParams(overrideParams || this.params),\n      observe: 'response',\n    }))\n\n    return <PageableResult<GetDataItemsT>>{\n      count: this.getCount(response),\n      results: this.getResults(response),\n    }\n  }\n\n  public reset() {\n    super.reset();\n    this.prepareInfiniteScroller()\n  }\n\n  /** This sets up the infinite scroller with an array full of null items so that the scrolling bar\n   * doesn't change in size.\n   *\n   * This is called in the constructor of the class.\n   */\n  public prepareInfiniteScroller() {\n    this.cachedData = Array.from<FinalDataItemsT>({length: this.maxTotalCount});\n    this.fetchedPages = new Set<number>();\n    // Putting in an empty array with null values for the length will trigger the connect function to run from *cdkInfiniteScroller\n    this.data$ = new BehaviorSubject<FinalDataItemsT[]>(this.cachedData);\n    // Initialize filtering here after the data$ is filled so the filter is able to initialize\n    this.initializeFiltering()\n  }\n\n  /**\n   * Ensures that if you need to put initialize back to its original state, you can override `initialize` with this one.\n   */\n  public async originalInitialize() {\n    return super.initialize()\n  }\n\n  public async initialize(): Promise<void> {\n    // Ignore it for infinite scroller since connect function is called\n  }\n\n  /**\n   * Ensures that if you need to put refresh back to its original state, you can override `refresh` with this one if you need to revert infinite scrolling for some reason\n   */\n  public async originalRefresh() {\n    return super.refresh()\n  }\n\n  /**\n   * Infinite scrolling works a bit different than a normal data retrieval. Generally, when you want to update the data\n   * you can call `refresh` and it will clear the data and get all the data again. However, with infinite scrolling is\n   * based on the scroll position, so we need to clear all the data except the current page, and then get the data for\n   * that current page again. This way, as you scroll, the data is fetched as needed.\n   */\n  public clearAllItemsExceptCurrentPage() {\n    // reset all data to nulls\n    if (!this.lastPageAccessed) { this.lastPageAccessed = 0 }\n    const startIndex = this.lastPageAccessed * this.pageSize\n    const endIndex = startIndex + this.pageSize\n    this.cachedData = this.cachedData.map((item, i) => (i >= startIndex && i <= endIndex) ? item : null)\n    this.fetchedPages.clear()\n    // Putting in an empty array with null values for the length will trigger the connect function to run from *cdkInfiniteScroller\n    this.data$.next(this.cachedData)\n    this.count$.next(this.pageSize > this.actualDataLength ? this.actualDataLength : this.pageSize)\n  }\n\n  /**\n   * Allows you to still call refresh in the infinite scroller, but does it in a way that is more efficient for infinite\n   * scrolling.\n   */\n  public async refresh(): Promise<PageableResult<FinalDataItemsT>> {\n    this.loading.next(true)\n    this.clearAllItemsExceptCurrentPage()\n    const pagedData = await this.fetchPageData(this.lastPageAccessed)\n    await this.fetchPage(this.lastPageAccessed, pagedData)\n    this.loading.next(false)\n    return <PageableResult<FinalDataItemsT>>{\n      results: this.data$.value,\n      count: this.count$.value,\n    }\n  }\n\n  /**\n   * Because we implement a DataSource, and use it in `*cdkVirtualFor=\"let item of dao`, we need to implement the\n   * connect and disconnect functions for the Material CDK Virtual Scroll to work and initialize.\n   *\n   * This called when the list pane is initialized with a collectionViewer.\n   * We subscribe to the collectionViewer to know what elements the user is currently viewing in the scroll list pane.\n   * It gives us a range with a start and end element. This is how we determine the start and end pages to fetch.\n   *\n   * At this point, we fetch all the pages that are currently in view and override those specific elements in the array.\n   *\n   * Then we return an observable that we want displayed in the list pane.\n   *\n   * We chose filteredData$, because we also want filtering functionality. Otherwise, we would use data$ instead.\n   * When there is no filter, filteredData$ is the same as data$.\n   *\n   * @param collectionViewer A way to know what elements are currently in view in the list pane\n   *\n   * @returns An observable of the data that is displayed in the list pane\n   */\n  public connect(collectionViewer: CollectionViewer): Observable<FinalDataItemsT[]> {\n    this.loading.next(true)\n    this.subscription = collectionViewer.viewChange.subscribe(async range => {\n      const startPage = this.getPageForIndex(range.start);\n      const endPage = this.getPageForIndex(range.end - 1);\n      const pagesFetched = await Promise.all(Array.from({ length: endPage - startPage + 1}).map(async (_, i) => {\n        const page = i + startPage;\n        const result = await this.fetchPageData(page)\n        return { result, page }\n      }))\n\n      // This must be a for loop without Promise.all because the array needs to be added in order of when the pages happen\n      for (const {result, page} of pagesFetched) {\n        await this.fetchPage(page, result)\n      }\n      if (this.loading.value) {\n        this.loading.next(false)\n      }\n    })\n    return this.filteredData$;\n  }\n\n  /**\n   * Retrieve pages data from the server.\n   *\n   * 1. Check to see if we already have the page\n   * 2. Set the last page accessed to the current page and add it to `fetchedPages`\n   * 3. Get the data from the server\n   *\n   * @param page The page number to retrieve\n   *\n   * @return The data from the server\n   */\n  public async fetchPageData(page: number) {\n    if (this.fetchedPages.has(page)) { return null }\n    this.lastPageAccessed = page\n    const isFirstTime = !this.initialized\n    this.initialized = true\n    this.fetchedPages.add(page);\n\n    const startPage = page * this.pageSize\n    return await this.retrieveFinalData({\n      ...this.params,\n      offset: startPage,\n      limit: this.pageSize,\n      includeCount: isFirstTime,\n    });\n  }\n\n  /**\n   * Updates the data based on the server result\n   *\n   * 4. Update certain indexes of the cached data with the new server data\n   * 5. Update the data$ BehaviorSubject with the new data which in turn updates the filteredData$.\n   * 6. Update the count$ BehaviorSubject with the new count\n   *\n   * @param page Page number 0+ to fetch. 0 is the first page\n   * @param serverPagedData\n   *\n   * @returns The newly cached updated data\n   */\n  public async fetchPage(page: number, serverPagedData: PageableResult<FinalDataItemsT>) {\n    if (!serverPagedData) { return null }\n\n    if (this.initialized && page > 0) {\n      serverPagedData.count = this.count$.value\n    } else if (this.cachedData.length < serverPagedData.count) {\n      this.cachedData = this.cachedData.concat(Array.from<FinalDataItemsT>({length: serverPagedData.count - this.cachedData.length}));\n    } else if (this.cachedData.length > serverPagedData.count) {\n      // Make sure the cachedData, which could have undefined items, is the correct length once we get data back for the first time\n      this.cachedData = this.cachedData.slice(0, serverPagedData.count);\n    }\n\n\n    if (serverPagedData.results.length === 0) {\n      this.cachedData = this.cachedData.filter(a => !!a)\n    } else {\n      const startPage = page * this.pageSize\n      this.cachedData.splice(startPage, this.pageSize, ...serverPagedData.results);\n    }\n    this.data$.next(this.cachedData);\n    this.count$.next(serverPagedData.count || this.actualDataLength)\n    return this.cachedData\n  }\n\n  /**\n   * The `*cdkVirtualFor=\"let item of dao` will call this when the component of the virtual for is destroyed.\n   */\n  public disconnect(): void {\n    this.subscription.unsubscribe();\n  }\n\n  /** Converts an index to the current page number */\n  private getPageForIndex(index: number): number {\n    return Math.floor(index / this.pageSize);\n  }\n}\n\n/**\n * If you don't need a server to display the items, then use this class for the `ngx-dc-side-pane-list` component.\n * This can also be used if your items are static, but you need to get data from the server when you click\n * on the items.\n */\nexport abstract class NgxDcSidePaneListArrayBaseDao<\n  GetDataItemsT, FinalDataItemsT = GetDataItemsT, RetrievedFocusedItemT = GetDataItemsT\n> extends NgxDcSidePaneListDataSource<GetDataItemsT, FinalDataItemsT, RetrievedFocusedItemT> {\n  protected constructor(items: FinalDataItemsT[]) {\n    super()\n    this.data$.next(items)\n    this.count$.next(items.filter(a => !!a).length)\n  }\n\n  public async retrieveDataItems(paramOverrides: any = null): Promise<PageableResult<GetDataItemsT>> {\n    return Promise.resolve({\n      count: this.data$.value.length,\n      results: this.data$.value as unknown as GetDataItemsT[],\n    });\n  }\n}\n\n/**\n * If you need to get data from the server but not use infinite scrolling, then use this class for the `ngx-dc-side-pane-list` component.\n */\nexport abstract class NgxDcSidePaneListApiDataSource<\n  GetDataItemsT, FinalDataItemsT = GetDataItemsT, RetrievedPaneItemT = GetDataItemsT, AllowedParamsT = any\n> extends NgxDcSidePaneListDataSource<GetDataItemsT, FinalDataItemsT, RetrievedPaneItemT> {\n  /** The relative path to the endpoint on the server to get the list pane data from */\n  public abstract relativePath: string\n\n  /** The parameters to send to the server as params when making the http GET request using the {relativePath} */\n  public params: Partial<AllowedParamsT> = {} as any\n\n  /** Needed for paging */\n  public override pageSize: number = INFINITE_DEFAULT_PAGE_SIZE\n\n  protected constructor(protected http: HttpClient) {\n    super();\n  }\n\n  /**\n   * This allows you to overrride the default behavior of the infinite scroller to set any params based on the\n   * next page the scroll wants.\n   * @param params\n   */\n  public getParams(params: {[key: string]: any }): {[key: string]: any } {\n    return params\n  }\n\n  /**\n   * This allows you to overrride the default behavior of the infinite scroller to set any params based on the\n   * next page the scroll wants.\n   *\n   * This is called each time you initialize or call refresh in the data source (and potentially other cases).\n   */\n  public getCount(response: HttpResponse<GetDataItemsT[]>): number {\n    const xTotalCount = response.headers.get(\"X-Total-Count\")\n    return xTotalCount === 'null' ? null : parseInt(xTotalCount || \"0\", 10)\n  }\n\n  /**\n   * Allows you to override how you get the data for the data source, once its retrieved from the response.\n   *\n   * This is called each time you initialize or call refresh in the data source (and potentially other cases).\n   *\n   * @param response The response of the GET request made with the relativePath for this data source.\n   *\n   * @returns\n   */\n  public getResults(response: HttpResponse<GetDataItemsT[]>): GetDataItemsT[] {\n    return response.body\n  }\n\n  public async retrieveDataItems(overrideParams: any = null): Promise<PageableResult<GetDataItemsT>> {\n    const response = await firstValueFrom(this.http.get<GetDataItemsT[]>(this.relativePath, {\n      params: this.getParams(overrideParams || this.params),\n      observe: 'response',\n    }))\n\n    return <PageableResult<GetDataItemsT>>{\n      count: this.getCount(response),\n      results: this.getResults(response),\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { NgxDcSidePaneListComponent } from './side-pane-list.component';\nimport { NgxDcPaneContentDirective } from './directives/pane-content.directive';\nimport { NgxDcPanePageInfoDirective } from './directives/pane-page-info.directive';\nimport { NgxDcSidePaneFooterDirective, NgxDcSidePaneItemDirective, NgxDcSidePaneItemIconDirective, NgxDcSidePaneItemLineNumberDirective, NgxDcSidePaneItemRightTextDirective, NgxDcSidePaneItemSubtitleDirective, NgxDcSidePaneItemTextDirective, NgxDcSidePaneLoadingItemDirective } from './directives/side-pane-item.directive';\n\nconst imports = [\n  NgxDcSidePaneListComponent,\n  NgxDcPanePageInfoDirective,\n  NgxDcPaneContentDirective,\n  NgxDcSidePaneItemDirective,\n  NgxDcSidePaneFooterDirective,\n  NgxDcSidePaneItemIconDirective,\n  NgxDcSidePaneItemLineNumberDirective,\n  NgxDcSidePaneItemSubtitleDirective,\n  NgxDcSidePaneItemRightTextDirective,\n  NgxDcSidePaneItemTextDirective,\n  NgxDcSidePaneLoadingItemDirective,\n]\n\n@NgModule({\n  imports: [imports],\n  exports: [imports],\n})\nexport class NgxDcSidePaneListModule { }\n","/*\n * Public API Surface of ngx-dc-side-pane-list\n */\n\nexport * from './lib/directives/pane-content.directive'\nexport * from './lib/directives/pane-page-info.directive'\nexport * from './lib/directives/side-pane-item.directive'\nexport * from './lib/side-pane-list.component'\nexport * from './lib/side-pane-list.data-source'\nexport * from './lib/side-pane-list.module'\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import {NgxDcSidePaneListApiDataSource} from \"@devcrate/ngx-dc-side-pane-list\";\nimport {PageableResult} from \"@devcrate/ngx-dc-data-sources\";\nimport {HttpClient} from \"@angular/common/http\";\nimport { Injectable, inject } from \"@angular/core\";\nimport {firstValueFrom} from \"rxjs\";\n\nexport interface BasicSidePaneListModel {\n  id: number\n}\n\n@Injectable()\nexport class BasicSidePaneListDataSource extends NgxDcSidePaneListApiDataSource<BasicSidePaneListModel> {\n  public relativePath = \"https://jsonplaceholder.typicode.com/users\"\n\n  public isActiveItem(selectedItem: BasicSidePaneListModel, currentItem: BasicSidePaneListModel): boolean {\n    return selectedItem.id == currentItem.id\n  }\n\n  public trackItems(item: BasicSidePaneListModel) {\n    return item.id\n  }\n\n  constructor() {\n    const httpClient = inject(HttpClient);\n\n    super(httpClient)\n  }\n}\n","import { Component, OnInit, inject } from '@angular/core';\nimport {BasicSidePaneListDataSource} from \"./basic-side-pane-list.data-source\";\nimport {\n  NgxDcSidePaneListModule\n} from \"@devcrate/ngx-dc-side-pane-list\";\nimport {MatCard, MatCardTitle} from \"@angular/material/card\";\nimport {JsonPipe} from \"@angular/common\";\n\n@Component({\n    selector: 'basic-side-pane-list',\n    templateUrl: './basic-side-pane-list.component.html',\n    styleUrl: './basic-side-pane-list.component.scss',\n    imports: [\n        NgxDcSidePaneListModule,\n        MatCardTitle,\n        MatCard,\n        JsonPipe\n    ],\n    providers: [BasicSidePaneListDataSource]\n})\n\nexport class BasicSidePaneListComponent implements OnInit {\n  dataSource = inject(BasicSidePaneListDataSource);\n\n\n  public async ngOnInit() {\n    await this.dataSource.initialize()\n  }\n}\n","<ngx-dc-side-pane-list [dataSource]=\"dataSource\">\n  <ng-container *ngxDcPanePageInfo=\"let selectedItem; let totalCount = totalCount; let collapsed = collapsed\">\n    <span class=\"total-items\">{{ totalCount }} Items</span>\n  </ng-container>\n  <ng-container *ngxDcSidePaneItem=\"let item; let index = index\">{{ item.name }}</ng-container>\n  <ng-container *ngxDcPaneContent=\"let retrievedItem; let selectedItem = selectedItem\">\n    <mat-card class=\"content-container\">\n      <h4 mat-card-title>Retrieved Item</h4>\n      {{ retrievedItem | json }}\n    </mat-card>\n  </ng-container>\n</ngx-dc-side-pane-list>\n","import {NgxDcInfiniteScrollDataSource, PageableResult} from \"@devcrate/ngx-dc-data-sources\";\nimport {HttpClient} from \"@angular/common/http\";\nimport { Injectable, inject } from \"@angular/core\";\nimport {NgxDcInfiniteSidePaneListDataSource} from \"@devcrate/ngx-dc-side-pane-list\";\nimport {BehaviorSubject} from \"rxjs\";\n\nexport interface MyModel {\n  id: number\n}\n\n@Injectable()\nexport class InfiniteScrollSidePaneListDataSource extends NgxDcInfiniteSidePaneListDataSource<MyModel> {\n  public relativePath = \"https://devcrate.onrender.com/api/people\"\n  public rowHeight: number = 80\n  public pageSize = 10\n  public maxTotalCount = 1000\n\n  public isActiveItem(selectedItem: MyModel, currentItem: MyModel): boolean {\n    return selectedItem.id == currentItem.id\n  }\n\n  public async retrieveDataItems(overrideParams: any = null): Promise<PageableResult<MyModel>> {\n    return super.retrieveDataItems(overrideParams);\n  }\n\n  public trackItems(item: MyModel) {\n    return item.id\n  }\n\n  constructor() {\n    const httpClient = inject(HttpClient);\n\n    super(httpClient)\n  }\n}\n","import { Component, OnInit, inject } from '@angular/core';\nimport {InfiniteScrollSidePaneListDataSource} from \"./infinite-scroll-side-pane-list.data-source\";\nimport {\n  NgxDcPaneContentDirective,\n  NgxDcPanePageInfoDirective,\n  NgxDcSidePaneItemDirective,\n  NgxDcSidePaneListComponent,\n  NgxDcSidePaneListModule\n} from \"@devcrate/ngx-dc-side-pane-list\";\nimport {MatCard, MatCardTitle} from \"@angular/material/card\";\nimport {JsonPipe} from \"@angular/common\";\n\n@Component({\n    selector: 'infinite-scroll-side-pane-list',\n    templateUrl: './infinite-scroll-side-pane-list.component.html',\n    styleUrl: './infinite-scroll-side-pane-list.component.scss',\n    imports: [\n        NgxDcSidePaneListModule,\n        MatCardTitle,\n        MatCard,\n        JsonPipe\n    ],\n    providers: [InfiniteScrollSidePaneListDataSource]\n})\n\nexport class InfiniteScrollSidePaneListComponent implements OnInit {\n  dataSource = inject(InfiniteScrollSidePaneListDataSource);\n\n\n  public async ngOnInit() {\n    await this.dataSource.initialize()\n  }\n}\n","<ngx-dc-side-pane-list [dataSource]=\"dataSource\" [useInfiniteScrolling]=\"true\">\n  <ng-container *ngxDcPanePageInfo=\"let selectedItem; let currentCount = currentCount; let totalCount = totalCount;\">\n    <span class=\"total-items\">{{ currentCount || 0 }} / {{ totalCount || 0 }}</span>\n  </ng-container>\n  <ng-container *ngxDcSidePaneItem=\"let item; let index = index\">{{ item.name }}</ng-container>\n  <ng-container *ngxDcPaneContent=\"let retrievedItem; let selectedItem = selectedItem\">\n    <mat-card class=\"content-container\">\n      <h4 mat-card-title>Retrieved Item</h4>\n      {{ retrievedItem | json }}\n    </mat-card>\n  </ng-container>\n</ngx-dc-side-pane-list>\n","import {NgxDcInfiniteScrollDataSource, PageableResult} from \"@devcrate/ngx-dc-data-sources\";\nimport {HttpClient} from \"@angular/common/http\";\nimport { Injectable, inject } from \"@angular/core\";\nimport {NgxDcInfiniteSidePaneListDataSource} from \"@devcrate/ngx-dc-side-pane-list\";\n\nexport interface MyModel {\n  id: number\n  name: string\n}\n\n@Injectable()\nexport class SortableInfiniteScrollSidePaneListDataSource extends NgxDcInfiniteSidePaneListDataSource<MyModel, MyModel, MyModel, {\n  limit: number\n  offset: number\n  sortDir: 'asc' | 'desc'\n  sortField: keyof MyModel\n}> {\n  public relativePath = \"https://devcrate.onrender.com/api/people\"\n  public rowHeight: number = 80\n  public pageSize = 10\n  public maxTotalCount = 1000\n\n  public isActiveItem(selectedItem: MyModel, currentItem: MyModel): boolean {\n    return selectedItem.id == currentItem.id\n  }\n\n  public trackItems(item: MyModel) {\n    return item.id\n  }\n\n  constructor() {\n    const httpClient = inject(HttpClient);\n\n    super(httpClient)\n  }\n}\n","import { JsonPipe } from \"@angular/common\";\nimport { Component, OnInit, inject, viewChild } from '@angular/core';\nimport { MatIconButton } from \"@angular/material/button\";\nimport { MatCard, MatCardTitle } from \"@angular/material/card\";\nimport { MatIcon } from \"@angular/material/icon\";\nimport {\n  NgxDcSidePaneListComponent,\n  NgxDcSidePaneListModule\n} from \"@devcrate/ngx-dc-side-pane-list\";\nimport { SortableInfiniteScrollSidePaneListDataSource } from \"./sortable-infinite-scroll-side-pane-list.data-source\";\n\n@Component({\n    selector: 'sortable-infinite-scroll-side-pane-list',\n    templateUrl: './sortable-infinite-scroll-side-pane-list.component.html',\n    styleUrl: './sortable-infinite-scroll-side-pane-list.component.scss',\n    imports: [\n        NgxDcSidePaneListModule,\n        MatCardTitle,\n        MatCard,\n        JsonPipe,\n        MatIcon,\n        MatIconButton\n    ],\n    providers: [SortableInfiniteScrollSidePaneListDataSource]\n})\n\nexport class SortableInfiniteScrollSidePaneListComponent implements OnInit {\n  dataSource = inject(SortableInfiniteScrollSidePaneListDataSource)\n\n  readonly table = viewChild(NgxDcSidePaneListComponent);\n\n  public sorted = false\n  public async sort() {\n    this.sorted = !this.sorted\n    this.table().scrollToTop()\n    this.dataSource.params = {}\n    this.dataSource.params.sortField = \"name\"\n    this.dataSource.params.sortDir = this.sorted ? \"desc\" : \"asc\"\n    this.dataSource.params.offset = 0\n    this.dataSource.initialized = false\n    await this.dataSource.refresh()\n  }\n\n  public async ngOnInit() {\n    await this.dataSource.initialize()\n  }\n}\n","<ngx-dc-side-pane-list [dataSource]=\"dataSource\" [useInfiniteScrolling]=\"true\">\n  <ng-container *ngxDcPanePageInfo=\"let selectedItem; let currentCount = currentCount; let totalCount = totalCount;\">\n    <span class=\"flex\">\n      <span class=\"total-items\">{{ currentCount || 0 }} / {{ totalCount || 0 }}</span>\n      <span class=\"fill\"></span>\n      <button mat-icon-button (click)=\"sort()\">\n        <mat-icon>\n          {{ sorted ? 'arrow_upward' : 'arrow_downward' }}\n        </mat-icon>\n      </button>\n    </span>\n\n  </ng-container>\n  <ng-container *ngxDcSidePaneItem=\"let item; let index = index\">{{ item.name }}</ng-container>\n  <ng-container *ngxDcPaneContent=\"let retrievedItem; let selectedItem = selectedItem\">\n    <mat-card class=\"content-container\">\n      <h4 mat-card-title>Retrieved Item</h4>\n      {{ retrievedItem | json }}\n    </mat-card>\n  </ng-container>\n</ngx-dc-side-pane-list>\n","import { Component, ViewEncapsulation, inject } from '@angular/core';\nimport { MatButton } from \"@angular/material/button\";\nimport { MatTab, MatTabGroup } from \"@angular/material/tabs\";\nimport {\n  CodeModalComponent,\n  CodeModalData,\n  DemoFileViewerComponent,\n  NgxDcDemoCardComponent,\n  NgxDcDemoCardModule,\n  NgxDcDemoTabsDirective\n} from \"@devcrate/ngx-dc-demo-card\";\nimport { NgxDcModalService, NgxDcModalServiceToken } from \"@devcrate/ngx-dc-utils\";\nimport { BasicSidePaneListComponent } from \"./basic-side-pane-list/basic-side-pane-list.component\";\nimport { InfiniteScrollSidePaneListComponent } from \"./infinite-scroll-side-pane-list/infinite-scroll-side-pane-list.component\";\nimport {\n  SortableInfiniteScrollSidePaneListComponent\n} from \"./sortable-infinite-scroll-side-pane-list/sortable-infinite-scroll-side-pane-list.component\";\n\n@Component({\n    selector: 'app-side-pane-list-demo',\n    imports: [\n        BasicSidePaneListComponent,\n        DemoFileViewerComponent,\n        NgxDcDemoCardModule,\n        MatTab,\n        MatTabGroup,\n        NgxDcDemoCardComponent,\n        NgxDcDemoTabsDirective,\n        InfiniteScrollSidePaneListComponent,\n        SortableInfiniteScrollSidePaneListComponent,\n        MatButton\n    ],\n    templateUrl: './side-pane-list-demo.component.html',\n    styleUrl: './side-pane-list-demo.component.scss',\n    encapsulation: ViewEncapsulation.None\n})\nexport class SidePaneListDemoComponent {\n  private modalService = inject(NgxDcModalService);\n\n\n  public async showModal() {\n    const originPath = window.location.origin.includes('localhost') ? '/' : window.location.origin + window.location.pathname\n\n    await this.modalService.showModal<CodeModalData>(CodeModalComponent, {\n      data: {\n        title: 'Side Pane List',\n        path: `${originPath}devcrate/ngx-dc-side-pane-list/README.md`,\n        previousTitles: [],\n        previousPaths: [],\n      },\n      width: '80vw',\n      height: '80vh',\n    })\n  }\n}\n","<div class=\"flex align-items-center\">\n  <h1 class=\"demo-title\">Side Pane List</h1>\n  <button mat-raised-button (click)=\"showModal()\">Documentation</button>\n</div>\n\n<ngx-dc-demo-card [showCodeIcon]=\"true\" [showLinkIcon]=\"false\">\n  <ng-container *ngxDcDemoCardTitle>Basic Side Pane List</ng-container>\n  <ng-container *ngxDcDemoCardSubtitle>Get data from server and display it</ng-container>\n  <mat-tab-group ngx-dc-demo-tabs>\n    <mat-tab label=\"Data Source\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/basic-side-pane-list/basic-side-pane-list.data-source.ts\"\n        language=\"jsx\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n    <mat-tab label=\"Component\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/basic-side-pane-list/basic-side-pane-list.component.ts\"\n        language=\"ts\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n    <mat-tab label=\"HTML\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/basic-side-pane-list/basic-side-pane-list.component.html\"\n        language=\"ts\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n    <mat-tab label=\"Styles\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/basic-side-pane-list/basic-side-pane-list.component.scss\"\n        language=\"scss\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n  </mat-tab-group>\n\n  <ng-container *ngxDcDemoCardExampleTitle>Live Demo</ng-container>\n  <ng-container *ngxDcDemoCardExample>\n    <basic-side-pane-list></basic-side-pane-list>\n  </ng-container>\n</ngx-dc-demo-card>\n\n<ngx-dc-demo-card [showCodeIcon]=\"true\" [showLinkIcon]=\"false\">\n  <ng-container *ngxDcDemoCardTitle>Infinite Scroll Side Pane List</ng-container>\n  <ng-container *ngxDcDemoCardSubtitle>Get data from server and display a paged amount as they scroll</ng-container>\n  <mat-tab-group ngx-dc-demo-tabs>\n    <mat-tab label=\"Data Source\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/infinite-scroll-side-pane-list/infinite-scroll-side-pane-list.data-source.ts\"\n        language=\"jsx\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n    <mat-tab label=\"Component\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/infinite-scroll-side-pane-list/infinite-scroll-side-pane-list.component.ts\"\n        language=\"ts\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n    <mat-tab label=\"HTML\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/infinite-scroll-side-pane-list/infinite-scroll-side-pane-list.component.html\"\n        language=\"ts\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n    <mat-tab label=\"Styles\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/infinite-scroll-side-pane-list/infinite-scroll-side-pane-list.component.scss\"\n        language=\"scss\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n  </mat-tab-group>\n\n  <ng-container *ngxDcDemoCardExampleTitle>Live Demo</ng-container>\n  <ng-container *ngxDcDemoCardExample>\n    <infinite-scroll-side-pane-list></infinite-scroll-side-pane-list>\n  </ng-container>\n</ngx-dc-demo-card>\n\n<ngx-dc-demo-card [showCodeIcon]=\"true\" [showLinkIcon]=\"false\">\n  <ng-container *ngxDcDemoCardTitle>Sortable Infinite Scroller</ng-container>\n  <ng-container *ngxDcDemoCardSubtitle>Be able to sort an infinite scrolling table</ng-container>\n  <mat-tab-group ngx-dc-demo-tabs>\n    <mat-tab label=\"Data Source\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/sortable-infinite-scroll-side-pane-list/sortable-infinite-scroll-side-pane-list.data-source.ts\"\n        language=\"jsx\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n    <mat-tab label=\"Component\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/sortable-infinite-scroll-side-pane-list/sortable-infinite-scroll-side-pane-list.component.ts\"\n        language=\"ts\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n    <mat-tab label=\"HTML\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/sortable-infinite-scroll-side-pane-list/sortable-infinite-scroll-side-pane-list.component.html\"\n        language=\"ts\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n    <mat-tab label=\"Styles\">\n      <ngx-dc-demo-file-viewer\n        filePath=\"app/pages/side-pane-list-demo/sortable-infinite-scroll-side-pane-list/sortable-infinite-scroll-side-pane-list.component.scss\"\n        language=\"scss\"\n      ></ngx-dc-demo-file-viewer>\n    </mat-tab>\n  </mat-tab-group>\n\n  <ng-container *ngxDcDemoCardExampleTitle>Live Demo</ng-container>\n  <ng-container *ngxDcDemoCardExample>\n    <sortable-infinite-scroll-side-pane-list></sortable-infinite-scroll-side-pane-list>\n  </ng-container>\n</ngx-dc-demo-card>\n\n"],"mappings":"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","names":["_CdkTextFieldStyleLoader","__ngFactoryType__","ɵɵdefineComponent","rf","ctx","listenerOptions","normalizePassiveListenerOptions","AutofillMonitor","inject","Platform","NgZone","_CdkPrivateStyleLoader","elementOrRef","EMPTY","element","coerceElement","info","result","Subject","cssClass","listener","event","_info","ɵɵdefineInjectable","TextFieldModule","__ngFactoryType__","ɵɵdefineNgModule","ɵɵdefineInjector","MAT_INPUT_VALUE_ACCESSOR","InjectionToken","MAT_INPUT_INVALID_TYPES","MAT_INPUT_CONFIG","MatInput","inject","ElementRef","Platform","NgControl","AutofillMonitor","NgZone","MAT_FORM_FIELD","Renderer2","_IdGenerator","Subject","value","coerceBooleanProperty","Validators","prevType","getSupportedInputTypes","parentForm","NgForm","parentFormGroup","FormGroupDirective","defaultErrorStateMatcher","ErrorStateMatcher","accessor","element","nodeName","isSignal","_ErrorStateTracker","effect","event","options","isFocused","newValue","placeholder","validity","selectElement","firstOption","ids","existingDescribedBy","toAssign","exclude","id","el","__ngFactoryType__","ɵɵdefineDirective","rf","ctx","ɵɵlistener","ɵɵhostProperty","ɵɵattribute","ɵɵclassProp","booleanAttribute","ɵɵProvidersFeature","MatFormFieldControl","ɵɵInputTransformsFeature","ɵɵNgOnChangesFeature","MatInputModule","ɵɵdefineNgModule","ɵɵdefineInjector","MatCommonModule","MatFormFieldModule","TextFieldModule","this","dataSource","trackItems","$item","_c2","a0","a1","a2","a3","a4","$implicit","collapsed","filteredCount","currentCount","totalCount","_c3","selectedItem","_c4","index","_c5","_c6","_c7","NgxDcSidePaneListComponent_ng_container_2_Template","rf","ctx","NgxDcSidePaneListComponent_Conditional_7_Template","_r1","ɵɵgetCurrentView","ctx_r1","filter","next","$event","ɵɵnextContext","NgxDcSidePaneListComponent_ng_template_10_Conditional_3_ng_container_0_Template","NgxDcSidePaneListComponent_ng_template_10_Conditional_3_Template","tmp_7_0","ctx_r4","ɵɵpureFunction3","item_r4","i_r6","NgxDcSidePaneListComponent_ng_template_10_Conditional_4_ng_container_0_Template","NgxDcSidePaneListComponent_ng_template_10_Conditional_4_Template","ɵɵpureFunction2","NgxDcSidePaneListComponent_ng_template_10_Template","_r3","onPaneItemClicked","isItemDisabled","value","isActiveItem","NgxDcSidePaneListComponent_Conditional_12_ng_container_1_ng_container_1_Template","NgxDcSidePaneListComponent_Conditional_12_ng_container_1_Template","item_r7","i_r8","NgxDcSidePaneListComponent_Conditional_12_Template","rowHeight","NgxDcSidePaneListComponent_Conditional_13_For_1_ng_container_0_Template","NgxDcSidePaneListComponent_Conditional_13_For_1_Template","item_r10","ɵ$index_47_r11","$index","NgxDcSidePaneListComponent_Conditional_13_Template","data$","NgxDcSidePaneListComponent_Conditional_14_ng_container_0_Template","NgxDcSidePaneListComponent_Conditional_14_Template","tmp_3_0","ɵɵpureFunction1","NgxDcSidePaneListComponent_Conditional_15_Template","_r12","set","NgxDcSidePaneListComponent_ng_container_17_Template","NgxDcPaneContentDirective","templateRef","inject","TemplateRef","ViewContainerRef","selectors","NgxDcPanePageInfoDirective","NgxDcSidePaneItemLineNumberDirective","viewContainerRef","NgxDcSidePaneItemDirective","NgxDcSidePaneFooterDirective","NgxDcSidePaneLoadingItemDirective","NgxDcSidePaneItemSubtitleDirective","NgxDcSidePaneItemTextDirective","NgxDcSidePaneItemRightTextDirective","NgxDcSidePaneItemIconDirective","NgxDcSidePaneListComponent","modalService","NgxDcModalServiceToken","destroy$","BehaviorSubject","model","useInfiniteScrolling","input","useGlobalLoader","useGlobalOnItem","collapsible","required","sidePaneFooter","contentChild","sidePaneItemLineNumber","sidePaneItem","sidePaneLoadingItem","sidePaneItemSubtitle","sidePaneItemText","sidePaneItemRightText","paneContent","panePageInfo","sidePaneItemIcon","element","viewChild","read","ElementRef","matListItems","viewChildren","firstMatItem","at","_elementRef","nativeElement","parentElement","firstElementChild","scrollToFirstItem","scrollIntoView","behavior","block","inline","activeMatItem","find","item","activated","scrollToTop","scrollTop","scrollToActiveItem","ngOnInit","loading","subscribe","showGlobalLoadingBar","itemLoading","pipe","skip","ngOnDestroy","complete","resetFocusedItem","retrievedItem","reset","__async","contentQueries","dirIndex","tmp_9_0","ɵɵpureFunction5","ɵɵpipeBind1","dependencies","CommonModule","NgClass","NgTemplateOutlet","AsyncPipe","MatProgressBarModule","MatIconModule","MatIcon","MatListModule","MatNavList","MatListItem","MatListSubheaderCssMatStyler","MatButtonModule","MatButton","MatCardModule","MatCard","MatTooltipModule","ScrollingModule","CdkFixedSizeVirtualScroll","CdkVirtualForOf","CdkVirtualScrollViewport","CdkVirtualScrollableElement","NgxDcFilledCountPipe","MatInputModule","MatInput","MatFormField","FormsModule","DefaultValueAccessor","NgControlStatus","NgModel","MatFormFieldModule","styles","encapsulation","NgxDcSidePaneListDataSource","NgxDcDataSource","pageSize","INFINITE_DEFAULT_PAGE_SIZE","retrieveItem","force","result","refreshRetrievedItem","ngClassPaneItem","focusedItem","NgxDcInfiniteSidePaneListDataSource","httpClient","maxTotalCount","INFINITE_DEFAULT_MAX_TOTAL_COUNT","params","fetchedPages","Set","cachedData","subscription","lastPageAccessed","constructor","prepareInfiniteScroller","getParams","getCount","response","xTotalCount","headers","get","parseInt","getResults","body","retrieveDataItems","overrideParams","firstValueFrom","relativePath","observe","count","results","Array","from","length","initializeFiltering","originalInitialize","__superGet","_NgxDcInfiniteSidePaneListDataSource","initialize","originalRefresh","refresh","clearAllItemsExceptCurrentPage","startIndex","endIndex","map","i","clear","count$","actualDataLength","pagedData","fetchPageData","fetchPage","connect","collectionViewer","viewChange","range","startPage","getPageForIndex","start","endPage","end","pagesFetched","Promise","all","_","page","filteredData$","has","isFirstTime","initialized","add","retrieveFinalData","__spreadProps","__spreadValues","offset","limit","includeCount","serverPagedData","concat","slice","a","splice","disconnect","unsubscribe","Math","floor","NgxDcSidePaneListApiDataSource","NgxDcSidePaneListDataSource","http","params","pageSize","INFINITE_DEFAULT_PAGE_SIZE","constructor","getParams","getCount","response","xTotalCount","headers","get","parseInt","getResults","body","retrieveDataItems","overrideParams","__async","firstValueFrom","relativePath","observe","count","results","NgxDcSidePaneListModule","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","NgxDcSidePaneListComponent","BasicSidePaneListDataSource","NgxDcSidePaneListApiDataSource","relativePath","isActiveItem","selectedItem","currentItem","id","trackItems","item","constructor","httpClient","inject","HttpClient","factory","ɵfac","ɵɵelementContainerStart","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","totalCount_r1","ɵɵtextInterpolate","item_r2","name","ɵɵpipeBind1","retrievedItem_r3","BasicSidePaneListComponent","dataSource","inject","BasicSidePaneListDataSource","ngOnInit","__async","initialize","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","rf","ctx","ɵɵtemplate","BasicSidePaneListComponent_ng_container_1_Template","BasicSidePaneListComponent_ng_container_2_Template","BasicSidePaneListComponent_ng_container_3_Template","ɵɵproperty","NgxDcSidePaneListModule","NgxDcSidePaneListComponent","NgxDcPanePageInfoDirective","NgxDcPaneContentDirective","NgxDcSidePaneItemDirective","MatCardTitle","MatCard","JsonPipe","styles","InfiniteScrollSidePaneListDataSource","NgxDcInfiniteSidePaneListDataSource","relativePath","rowHeight","pageSize","maxTotalCount","isActiveItem","selectedItem","currentItem","id","retrieveDataItems","overrideParams","__async","__superGet","trackItems","item","constructor","httpClient","inject","HttpClient","factory","ɵfac","ɵɵelementContainerStart","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate2","currentCount_r1","totalCount_r2","ɵɵtextInterpolate","item_r3","name","ɵɵtextInterpolate1","ɵɵpipeBind1","retrievedItem_r4","InfiniteScrollSidePaneListComponent","dataSource","inject","InfiniteScrollSidePaneListDataSource","ngOnInit","__async","initialize","selectors","features","ɵɵProvidersFeature","decls","vars","consts","template","rf","ctx","ɵɵtemplate","InfiniteScrollSidePaneListComponent_ng_container_1_Template","InfiniteScrollSidePaneListComponent_ng_container_2_Template","InfiniteScrollSidePaneListComponent_ng_container_3_Template","ɵɵproperty","NgxDcSidePaneListModule","NgxDcSidePaneListComponent","NgxDcPanePageInfoDirective","NgxDcPaneContentDirective","NgxDcSidePaneItemDirective","MatCardTitle","MatCard","JsonPipe","styles","SortableInfiniteScrollSidePaneListDataSource","NgxDcInfiniteSidePaneListDataSource","relativePath","rowHeight","pageSize","maxTotalCount","isActiveItem","selectedItem","currentItem","id","trackItems","item","constructor","httpClient","inject","HttpClient","factory","ɵfac","ɵɵelementContainerStart","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","ɵɵrestoreView","_r1","ctx_r1","ɵɵnextContext","ɵɵresetView","sort","ɵɵadvance","ɵɵtextInterpolate2","currentCount_r3","totalCount_r4","ɵɵtextInterpolate1","sorted","ɵɵtextInterpolate","item_r5","name","ɵɵpipeBind1","retrievedItem_r6","SortableInfiniteScrollSidePaneListComponent","dataSource","inject","SortableInfiniteScrollSidePaneListDataSource","table","viewChild","NgxDcSidePaneListComponent","__async","scrollToTop","params","sortField","sortDir","offset","initialized","refresh","ngOnInit","initialize","selectors","viewQuery","rf","ctx","decls","vars","consts","template","ɵɵtemplate","SortableInfiniteScrollSidePaneListComponent_ng_container_1_Template","SortableInfiniteScrollSidePaneListComponent_ng_container_2_Template","SortableInfiniteScrollSidePaneListComponent_ng_container_3_Template","ɵɵproperty","NgxDcSidePaneListModule","NgxDcPanePageInfoDirective","NgxDcPaneContentDirective","NgxDcSidePaneItemDirective","MatCardTitle","MatCard","JsonPipe","MatIcon","MatIconButton","styles","ɵɵelementContainerStart","ɵɵtext","ɵɵelement","SidePaneListDemoComponent","modalService","inject","NgxDcModalService","showModal","__async","originPath","window","location","origin","includes","pathname","CodeModalComponent","data","title","path","previousTitles","previousPaths","width","height","selectors","decls","vars","consts","template","rf","ctx","ɵɵelementStart","ɵɵelementEnd","ɵɵlistener","ɵɵtemplate","SidePaneListDemoComponent_ng_container_6_Template","SidePaneListDemoComponent_ng_container_7_Template","SidePaneListDemoComponent_ng_container_17_Template","SidePaneListDemoComponent_ng_container_18_Template","SidePaneListDemoComponent_ng_container_20_Template","SidePaneListDemoComponent_ng_container_21_Template","SidePaneListDemoComponent_ng_container_31_Template","SidePaneListDemoComponent_ng_container_32_Template","SidePaneListDemoComponent_ng_container_34_Template","SidePaneListDemoComponent_ng_container_35_Template","SidePaneListDemoComponent_ng_container_45_Template","SidePaneListDemoComponent_ng_container_46_Template","ɵɵadvance","ɵɵproperty","BasicSidePaneListComponent","DemoFileViewerComponent","NgxDcDemoCardModule","NgxDcDemoCardComponent","NgxDcDemoCardTitleDirective","NgxDcDemoCardSubtitleDirective","NgxDcDemoCardExampleDirective","NgxDcDemoTabsDirective","NgxDcDemoCardExampleTitleDirective","MatTab","MatTabGroup","InfiniteScrollSidePaneListComponent","SortableInfiniteScrollSidePaneListComponent","MatButton","styles","encapsulation"],"x_google_ignoreList":[0,1]}